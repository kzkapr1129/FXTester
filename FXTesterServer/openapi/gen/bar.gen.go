// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Defines values for AuthStatusStatus.
const (
	LoggedIn  AuthStatusStatus = "loggedIn"
	LoggedOut AuthStatusStatus = "loggedOut"
)

// Defines values for CsvFormat.
const (
	MT4 CsvFormat = "MT4"
	MT5 CsvFormat = "MT5"
)

// Defines values for FeatureType.
const (
	Candlewick FeatureType = "candlewick"
	Elliott    FeatureType = "elliott"
	PowerBar   FeatureType = "power_bar"
)

// Defines values for Position.
const (
	Long  Position = "long"
	Short Position = "short"
)

// Defines values for TradeResultResult.
const (
	Even TradeResultResult = "even"
	Lose TradeResultResult = "lose"
	Win  TradeResultResult = "win"
)

// AuthStatus defines model for authStatus.
type AuthStatus struct {
	// Expires セッションの有効期限
	Expires string `json:"expires"`

	// Status ログイン状態
	Status AuthStatusStatus `json:"status"`
}

// AuthStatusStatus ログイン状態
type AuthStatusStatus string

// Candle defines model for candle.
type Candle struct {
	// Close 終値
	Close float32 `json:"close"`

	// High 高値
	High float32 `json:"high"`

	// Index インデックス(リソース別時刻昇順順)
	Index int64 `json:"index"`

	// Low 安値
	Low float32 `json:"low"`

	// Open 始値
	Open float32 `json:"open"`

	// Time ローソク足の時刻。UnixTime(GMT+9)形式
	Time int64 `json:"time"`
}

// CsvFormat csvファイルのフォーマット
type CsvFormat string

// Error defines model for error.
type Error struct {
	// Arguments エラーの要因となった名称。エラーコードによって渡されるエラー要因の数や内容は決まっている。
	Arguments *[]string `json:"arguments,omitempty"`

	// Code エラーコード
	Code int `json:"code"`

	// ErrorName エラー名称 (多言語化非対応のためFE側での使用は控えること)
	ErrorName string `json:"error_name"`
}

// FeatureType チャートの特徴種別
type FeatureType string

// Position ポジション種別
type Position string

// TradeResult defines model for tradeResult.
type TradeResult struct {
	// EndCandleIndex 取引が終了した位置 (ローソク足のインデックス)
	EndCandleIndex int64 `json:"end_candle_index"`

	// Position ポジション種別
	Position Position `json:"position"`

	// Result 取引の勝敗結果
	Result *TradeResultResult `json:"result,omitempty"`

	// StartCandleIndex 取引を開始した位置 (ローソク足のインデックス)
	StartCandleIndex int64 `json:"start_candle_index"`
}

// TradeResultResult 取引の勝敗結果
type TradeResultResult string

// PostApiAuthJSONBody defines parameters for PostApiAuth.
type PostApiAuthJSONBody struct {
	// Id ユーザID
	Id string `json:"id"`

	// Password ユーザパスワード
	Password string `json:"password"`
}

// PostApiAuthRefreshJSONBody defines parameters for PostApiAuthRefresh.
type PostApiAuthRefreshJSONBody = map[string]interface{}

// DeleteApiDataFeaturesJSONBody defines parameters for DeleteApiDataFeatures.
type DeleteApiDataFeaturesJSONBody struct {
	// FeatureIds 削除する特徴IDの一覧
	FeatureIds []string `json:"feature_ids"`
}

// GetApiDataFeaturesParams defines parameters for GetApiDataFeatures.
type GetApiDataFeaturesParams struct {
	// FeatureIds 特徴データID (複数指定の場合はカンマ区切り)
	FeatureIds string `form:"feature_ids" json:"feature_ids"`

	// Limit 一度に取得するアイテム数
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// PageToken ページトークン
	PageToken *string `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostApiDataFeaturesJSONBody defines parameters for PostApiDataFeatures.
type PostApiDataFeaturesJSONBody struct {
	// FeatureTypes 抽出する特徴のタイプ一覧
	FeatureTypes *[]FeatureType `json:"feature_types,omitempty"`
	Parameters   *struct {
		// Left 特徴の推定に使用する過去ローソク足の数
		Left *int `json:"left,omitempty"`
	} `json:"parameters,omitempty"`

	// ResourceId ローソク足リソースのID
	ResourceId string `json:"resource_id"`

	// Save データをサーバーに保存するか否かのフラグ値
	Save *bool `json:"save,omitempty"`
}

// GetApiDataResourceFeaturesIdsParams defines parameters for GetApiDataResourceFeaturesIds.
type GetApiDataResourceFeaturesIdsParams struct {
	// Limit 一度に取得するアイテム数
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// PageToken ページトークン
	PageToken *string `form:"page_token,omitempty" json:"page_token,omitempty"`

	// ResourceIds リソースID (複数指定の場合はカンマ区切り)
	ResourceIds *string `form:"resource_ids,omitempty" json:"resource_ids,omitempty"`

	// FeatureType 特徴タイプ (複数指定の場合はカンマ区切り)
	FeatureType *FeatureType `form:"feature_type,omitempty" json:"feature_type,omitempty"`
}

// DeleteApiResourceCandlesJSONBody defines parameters for DeleteApiResourceCandles.
type DeleteApiResourceCandlesJSONBody struct {
	// ResourceIds 削除するローソク足リソースのID一覧
	ResourceIds *[]string `json:"resource_ids,omitempty"`
}

// GetApiResourceCandlesParams defines parameters for GetApiResourceCandles.
type GetApiResourceCandlesParams struct {
	// ResourceId リソースID
	ResourceId string `form:"resource_id" json:"resource_id"`

	// TimeAt 取得するローソク足の時刻 (完全一致)
	TimeAt *string `form:"time_at,omitempty" json:"time_at,omitempty"`

	// TimeIncluding 取得するローソク足の時刻 (この時間を含むローソク足を取得する)
	TimeIncluding *string `form:"time_including,omitempty" json:"time_including,omitempty"`

	// TimeRangeStart 取得するローソク足の開始時刻
	TimeRangeStart *string `form:"time_range_start,omitempty" json:"time_range_start,omitempty"`

	// TimeRangeEnd 取得するローソク足の終了時刻
	TimeRangeEnd *string `form:"time_range_end,omitempty" json:"time_range_end,omitempty"`

	// Index 取得するローソク足のインデックス (Unix時間で昇順に並べた順)
	Index *int `form:"index,omitempty" json:"index,omitempty"`

	// Left ローソク足配列のインデックスから過去方向に取得するローソク足の数
	Left *int `form:"left,omitempty" json:"left,omitempty"`

	// Right ローソク足配列のインデックスから未来方向に取得するローソク足の数
	Right *int `form:"right,omitempty" json:"right,omitempty"`
}

// PostApiResourceCandlesJSONBody defines parameters for PostApiResourceCandles.
type PostApiResourceCandlesJSONBody struct {
	// CsvFormat csvファイルのフォーマット
	CsvFormat *CsvFormat `json:"csv_format,omitempty"`

	// Data ローソク足のデータが格納されたcsvのバイナリデータ
	Data *openapi_types.File `json:"data,omitempty"`

	// Name リソース名
	Name  *string `json:"name,omitempty"`
	Range *struct {
		// EndRow 保存するローソク足の終了日時 (日時のフォーマットはcsvに格納されているデータと同じにする)
		EndRow *string `json:"end_row,omitempty"`

		// StartRow 保存するローソク足の開始日時 (日時のフォーマットはcsvに格納されているデータと同じにする)
		StartRow *int `json:"start_row,omitempty"`
	} `json:"range,omitempty"`
}

// GetApiResourceCandlesMetadataParams defines parameters for GetApiResourceCandlesMetadata.
type GetApiResourceCandlesMetadataParams struct {
	// Limit 一度に取得するリストアイテムの数
	Limit int `form:"limit" json:"limit"`

	// PageToken ページトークン
	PageToken *string `form:"page_token,omitempty" json:"page_token,omitempty"`

	// Keyword リソース名の検索キーワード (前方後方一致のワイルドカード指定可能)
	Keyword *string `form:"keyword,omitempty" json:"keyword,omitempty"`
}

// DeleteApiTestJSONBody defines parameters for DeleteApiTest.
type DeleteApiTestJSONBody struct {
	// TestResultIds テスト結果ID (複数指定の場合はカンマ区切り)
	TestResultIds string `json:"test_result_ids"`
}

// GetApiTestParams defines parameters for GetApiTest.
type GetApiTestParams struct {
	// TestResultId テスト結果データID
	TestResultId string `form:"test_result_id" json:"test_result_id"`

	// Limit 一度に取得するアイテム数
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// PageToken ページトークン
	PageToken *string `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostApiTestJSONBody defines parameters for PostApiTest.
type PostApiTestJSONBody struct {
	// ResourceId ローソク足リソースのID
	ResourceId *string `json:"resource_id,omitempty"`

	// Save テスト結果をサーバーに保存するかのフラグ値
	Save   *bool `json:"save,omitempty"`
	Trades *[]struct {
		CandleIndex int64 `json:"candle_index"`

		// LossCut ロスカットする価格
		LossCut float32 `json:"loss_cut"`

		// Position ポジション種別
		Position Position `json:"position"`

		// TakeProfit 利益を確定する価格
		TakeProfit float32 `json:"take_profit"`

		// Timeout 取引をタイムアウトとするローソク足の本数
		Timeout int `json:"timeout"`
	} `json:"trades,omitempty"`
}

// GetApiTestIdsParams defines parameters for GetApiTestIds.
type GetApiTestIdsParams struct {
	// Limit 一度に取得するアイテム数
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`

	// PageToken ページトークン
	PageToken *string `form:"page_token,omitempty" json:"page_token,omitempty"`
}

// PostApiAuthJSONRequestBody defines body for PostApiAuth for application/json ContentType.
type PostApiAuthJSONRequestBody PostApiAuthJSONBody

// PostApiAuthRefreshJSONRequestBody defines body for PostApiAuthRefresh for application/json ContentType.
type PostApiAuthRefreshJSONRequestBody = PostApiAuthRefreshJSONBody

// DeleteApiDataFeaturesJSONRequestBody defines body for DeleteApiDataFeatures for application/json ContentType.
type DeleteApiDataFeaturesJSONRequestBody DeleteApiDataFeaturesJSONBody

// PostApiDataFeaturesJSONRequestBody defines body for PostApiDataFeatures for application/json ContentType.
type PostApiDataFeaturesJSONRequestBody PostApiDataFeaturesJSONBody

// DeleteApiResourceCandlesJSONRequestBody defines body for DeleteApiResourceCandles for application/json ContentType.
type DeleteApiResourceCandlesJSONRequestBody DeleteApiResourceCandlesJSONBody

// PostApiResourceCandlesJSONRequestBody defines body for PostApiResourceCandles for application/json ContentType.
type PostApiResourceCandlesJSONRequestBody PostApiResourceCandlesJSONBody

// DeleteApiTestJSONRequestBody defines body for DeleteApiTest for application/json ContentType.
type DeleteApiTestJSONRequestBody DeleteApiTestJSONBody

// PostApiTestJSONRequestBody defines body for PostApiTest for application/json ContentType.
type PostApiTestJSONRequestBody PostApiTestJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteApiAuth request
	DeleteApiAuth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiAuth request
	GetApiAuth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiAuthWithBody request with any body
	PostApiAuthWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiAuth(ctx context.Context, body PostApiAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiAuthRefreshWithBody request with any body
	PostApiAuthRefreshWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiAuthRefresh(ctx context.Context, body PostApiAuthRefreshJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiDataFeaturesWithBody request with any body
	DeleteApiDataFeaturesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteApiDataFeatures(ctx context.Context, body DeleteApiDataFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDataFeatures request
	GetApiDataFeatures(ctx context.Context, params *GetApiDataFeaturesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiDataFeaturesWithBody request with any body
	PostApiDataFeaturesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiDataFeatures(ctx context.Context, body PostApiDataFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiDataResourceFeaturesIds request
	GetApiDataResourceFeaturesIds(ctx context.Context, params *GetApiDataResourceFeaturesIdsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiResourceCandlesWithBody request with any body
	DeleteApiResourceCandlesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteApiResourceCandles(ctx context.Context, body DeleteApiResourceCandlesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiResourceCandles request
	GetApiResourceCandles(ctx context.Context, params *GetApiResourceCandlesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiResourceCandlesWithBody request with any body
	PostApiResourceCandlesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiResourceCandles(ctx context.Context, body PostApiResourceCandlesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiResourceCandlesMetadata request
	GetApiResourceCandlesMetadata(ctx context.Context, params *GetApiResourceCandlesMetadataParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiSamlAcs request
	PostApiSamlAcs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiSamlLogin request
	GetApiSamlLogin(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiSamlLogout request
	GetApiSamlLogout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiSamlSlo request
	PostApiSamlSlo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiTestWithBody request with any body
	DeleteApiTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteApiTest(ctx context.Context, body DeleteApiTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiTest request
	GetApiTest(ctx context.Context, params *GetApiTestParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiTestWithBody request with any body
	PostApiTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiTest(ctx context.Context, body PostApiTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiTestIds request
	GetApiTestIds(ctx context.Context, params *GetApiTestIdsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeleteApiAuth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiAuthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiAuth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiAuthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuth(ctx context.Context, body PostApiAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthRefreshWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthRefreshRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiAuthRefresh(ctx context.Context, body PostApiAuthRefreshJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiAuthRefreshRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiDataFeaturesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiDataFeaturesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiDataFeatures(ctx context.Context, body DeleteApiDataFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiDataFeaturesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDataFeatures(ctx context.Context, params *GetApiDataFeaturesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDataFeaturesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiDataFeaturesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiDataFeaturesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiDataFeatures(ctx context.Context, body PostApiDataFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiDataFeaturesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiDataResourceFeaturesIds(ctx context.Context, params *GetApiDataResourceFeaturesIdsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiDataResourceFeaturesIdsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiResourceCandlesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiResourceCandlesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiResourceCandles(ctx context.Context, body DeleteApiResourceCandlesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiResourceCandlesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiResourceCandles(ctx context.Context, params *GetApiResourceCandlesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiResourceCandlesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiResourceCandlesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiResourceCandlesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiResourceCandles(ctx context.Context, body PostApiResourceCandlesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiResourceCandlesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiResourceCandlesMetadata(ctx context.Context, params *GetApiResourceCandlesMetadataParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiResourceCandlesMetadataRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiSamlAcs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiSamlAcsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiSamlLogin(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiSamlLoginRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiSamlLogout(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiSamlLogoutRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiSamlSlo(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiSamlSloRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiTestRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiTest(ctx context.Context, body DeleteApiTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiTestRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiTest(ctx context.Context, params *GetApiTestParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiTestRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiTestWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiTestRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiTest(ctx context.Context, body PostApiTestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiTestRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiTestIds(ctx context.Context, params *GetApiTestIdsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiTestIdsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteApiAuthRequest generates requests for DeleteApiAuth
func NewDeleteApiAuthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiAuthRequest generates requests for GetApiAuth
func NewGetApiAuthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiAuthRequest calls the generic PostApiAuth builder with application/json body
func NewPostApiAuthRequest(server string, body PostApiAuthJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiAuthRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiAuthRequestWithBody generates requests for PostApiAuth with any type of body
func NewPostApiAuthRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostApiAuthRefreshRequest calls the generic PostApiAuthRefresh builder with application/json body
func NewPostApiAuthRefreshRequest(server string, body PostApiAuthRefreshJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiAuthRefreshRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiAuthRefreshRequestWithBody generates requests for PostApiAuthRefresh with any type of body
func NewPostApiAuthRefreshRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/auth/refresh")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiDataFeaturesRequest calls the generic DeleteApiDataFeatures builder with application/json body
func NewDeleteApiDataFeaturesRequest(server string, body DeleteApiDataFeaturesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteApiDataFeaturesRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteApiDataFeaturesRequestWithBody generates requests for DeleteApiDataFeatures with any type of body
func NewDeleteApiDataFeaturesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/data/features")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiDataFeaturesRequest generates requests for GetApiDataFeatures
func NewGetApiDataFeaturesRequest(server string, params *GetApiDataFeaturesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/data/features")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "feature_ids", runtime.ParamLocationQuery, params.FeatureIds); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiDataFeaturesRequest calls the generic PostApiDataFeatures builder with application/json body
func NewPostApiDataFeaturesRequest(server string, body PostApiDataFeaturesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiDataFeaturesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiDataFeaturesRequestWithBody generates requests for PostApiDataFeatures with any type of body
func NewPostApiDataFeaturesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/data/features")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiDataResourceFeaturesIdsRequest generates requests for GetApiDataResourceFeaturesIds
func NewGetApiDataResourceFeaturesIdsRequest(server string, params *GetApiDataResourceFeaturesIdsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/data/resource/features/ids")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ResourceIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resource_ids", runtime.ParamLocationQuery, *params.ResourceIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.FeatureType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "feature_type", runtime.ParamLocationQuery, *params.FeatureType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiResourceCandlesRequest calls the generic DeleteApiResourceCandles builder with application/json body
func NewDeleteApiResourceCandlesRequest(server string, body DeleteApiResourceCandlesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteApiResourceCandlesRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteApiResourceCandlesRequestWithBody generates requests for DeleteApiResourceCandles with any type of body
func NewDeleteApiResourceCandlesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/resource/candles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiResourceCandlesRequest generates requests for GetApiResourceCandles
func NewGetApiResourceCandlesRequest(server string, params *GetApiResourceCandlesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/resource/candles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "resource_id", runtime.ParamLocationQuery, params.ResourceId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.TimeAt != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_at", runtime.ParamLocationQuery, *params.TimeAt); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimeIncluding != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_including", runtime.ParamLocationQuery, *params.TimeIncluding); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimeRangeStart != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_range_start", runtime.ParamLocationQuery, *params.TimeRangeStart); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TimeRangeEnd != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "time_range_end", runtime.ParamLocationQuery, *params.TimeRangeEnd); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Index != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "index", runtime.ParamLocationQuery, *params.Index); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Left != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "left", runtime.ParamLocationQuery, *params.Left); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Right != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "right", runtime.ParamLocationQuery, *params.Right); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiResourceCandlesRequest calls the generic PostApiResourceCandles builder with application/json body
func NewPostApiResourceCandlesRequest(server string, body PostApiResourceCandlesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiResourceCandlesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiResourceCandlesRequestWithBody generates requests for PostApiResourceCandles with any type of body
func NewPostApiResourceCandlesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/resource/candles")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiResourceCandlesMetadataRequest generates requests for GetApiResourceCandlesMetadata
func NewGetApiResourceCandlesMetadataRequest(server string, params *GetApiResourceCandlesMetadataParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/resource/candles/metadata")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Keyword != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "keyword", runtime.ParamLocationQuery, *params.Keyword); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiSamlAcsRequest generates requests for PostApiSamlAcs
func NewPostApiSamlAcsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/saml/acs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiSamlLoginRequest generates requests for GetApiSamlLogin
func NewGetApiSamlLoginRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/saml/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetApiSamlLogoutRequest generates requests for GetApiSamlLogout
func NewGetApiSamlLogoutRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/saml/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiSamlSloRequest generates requests for PostApiSamlSlo
func NewPostApiSamlSloRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/saml/slo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteApiTestRequest calls the generic DeleteApiTest builder with application/json body
func NewDeleteApiTestRequest(server string, body DeleteApiTestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteApiTestRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteApiTestRequestWithBody generates requests for DeleteApiTest with any type of body
func NewDeleteApiTestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiTestRequest generates requests for GetApiTest
func NewGetApiTestRequest(server string, params *GetApiTestParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "test_result_id", runtime.ParamLocationQuery, params.TestResultId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostApiTestRequest calls the generic PostApiTest builder with application/json body
func NewPostApiTestRequest(server string, body PostApiTestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiTestRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiTestRequestWithBody generates requests for PostApiTest with any type of body
func NewPostApiTestRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/test")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetApiTestIdsRequest generates requests for GetApiTestIds
func NewGetApiTestIdsRequest(server string, params *GetApiTestIdsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/test/ids")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.PageToken != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page_token", runtime.ParamLocationQuery, *params.PageToken); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteApiAuthWithResponse request
	DeleteApiAuthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteApiAuthResponse, error)

	// GetApiAuthWithResponse request
	GetApiAuthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiAuthResponse, error)

	// PostApiAuthWithBodyWithResponse request with any body
	PostApiAuthWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthResponse, error)

	PostApiAuthWithResponse(ctx context.Context, body PostApiAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthResponse, error)

	// PostApiAuthRefreshWithBodyWithResponse request with any body
	PostApiAuthRefreshWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthRefreshResponse, error)

	PostApiAuthRefreshWithResponse(ctx context.Context, body PostApiAuthRefreshJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthRefreshResponse, error)

	// DeleteApiDataFeaturesWithBodyWithResponse request with any body
	DeleteApiDataFeaturesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiDataFeaturesResponse, error)

	DeleteApiDataFeaturesWithResponse(ctx context.Context, body DeleteApiDataFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiDataFeaturesResponse, error)

	// GetApiDataFeaturesWithResponse request
	GetApiDataFeaturesWithResponse(ctx context.Context, params *GetApiDataFeaturesParams, reqEditors ...RequestEditorFn) (*GetApiDataFeaturesResponse, error)

	// PostApiDataFeaturesWithBodyWithResponse request with any body
	PostApiDataFeaturesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiDataFeaturesResponse, error)

	PostApiDataFeaturesWithResponse(ctx context.Context, body PostApiDataFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiDataFeaturesResponse, error)

	// GetApiDataResourceFeaturesIdsWithResponse request
	GetApiDataResourceFeaturesIdsWithResponse(ctx context.Context, params *GetApiDataResourceFeaturesIdsParams, reqEditors ...RequestEditorFn) (*GetApiDataResourceFeaturesIdsResponse, error)

	// DeleteApiResourceCandlesWithBodyWithResponse request with any body
	DeleteApiResourceCandlesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiResourceCandlesResponse, error)

	DeleteApiResourceCandlesWithResponse(ctx context.Context, body DeleteApiResourceCandlesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiResourceCandlesResponse, error)

	// GetApiResourceCandlesWithResponse request
	GetApiResourceCandlesWithResponse(ctx context.Context, params *GetApiResourceCandlesParams, reqEditors ...RequestEditorFn) (*GetApiResourceCandlesResponse, error)

	// PostApiResourceCandlesWithBodyWithResponse request with any body
	PostApiResourceCandlesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiResourceCandlesResponse, error)

	PostApiResourceCandlesWithResponse(ctx context.Context, body PostApiResourceCandlesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiResourceCandlesResponse, error)

	// GetApiResourceCandlesMetadataWithResponse request
	GetApiResourceCandlesMetadataWithResponse(ctx context.Context, params *GetApiResourceCandlesMetadataParams, reqEditors ...RequestEditorFn) (*GetApiResourceCandlesMetadataResponse, error)

	// PostApiSamlAcsWithResponse request
	PostApiSamlAcsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiSamlAcsResponse, error)

	// GetApiSamlLoginWithResponse request
	GetApiSamlLoginWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiSamlLoginResponse, error)

	// GetApiSamlLogoutWithResponse request
	GetApiSamlLogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiSamlLogoutResponse, error)

	// PostApiSamlSloWithResponse request
	PostApiSamlSloWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiSamlSloResponse, error)

	// DeleteApiTestWithBodyWithResponse request with any body
	DeleteApiTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiTestResponse, error)

	DeleteApiTestWithResponse(ctx context.Context, body DeleteApiTestJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiTestResponse, error)

	// GetApiTestWithResponse request
	GetApiTestWithResponse(ctx context.Context, params *GetApiTestParams, reqEditors ...RequestEditorFn) (*GetApiTestResponse, error)

	// PostApiTestWithBodyWithResponse request with any body
	PostApiTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiTestResponse, error)

	PostApiTestWithResponse(ctx context.Context, body PostApiTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiTestResponse, error)

	// GetApiTestIdsWithResponse request
	GetApiTestIdsWithResponse(ctx context.Context, params *GetApiTestIdsParams, reqEditors ...RequestEditorFn) (*GetApiTestIdsResponse, error)
}

type DeleteApiAuthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApiAuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiAuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiAuthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AuthStatus
}

// Status returns HTTPResponse.Status
func (r GetApiAuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiAuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiAuthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *AuthStatus
}

// Status returns HTTPResponse.Status
func (r PostApiAuthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiAuthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiAuthRefreshResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiAuthRefreshResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiAuthRefreshResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiDataFeaturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]interface{}
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteApiDataFeaturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiDataFeaturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDataFeaturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items *[]struct {
			// CandleIndexes 特徴の発生点となったローソク足のインデックス。発生点の解釈は特徴タイプやパラメータなどによって異なるため仕様を確認すること。
			CandleIndexes *[]string `json:"candle_indexes,omitempty"`

			// FeatureId 特徴ID
			FeatureId *string `json:"feature_id,omitempty"`

			// FeatureType チャートの特徴種別
			FeatureType *FeatureType `json:"feature_type,omitempty"`

			// ResourceId ローソク足リソースのID
			ResourceId *string `json:"resource_id,omitempty"`
		} `json:"items,omitempty"`

		// PageToken ページトークン
		PageToken *string `json:"page_token,omitempty"`

		// Total itemsの数
		Total *int `json:"total,omitempty"`
	}
	JSON400 *Error
	JSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetApiDataFeaturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDataFeaturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiDataFeaturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results *[]struct {
			// CandleIndexes 特徴の発生点となったローソク足のインデックス。発生点の解釈は特徴タイプやパラメータなどによって異なるため仕様を確認すること。
			CandleIndexes *[]string `json:"candle_indexes,omitempty"`

			// FeatureId 特徴ID (サーバーに保存していない場合は空文字が返却される)
			FeatureId *string `json:"feature_id,omitempty"`

			// FeatureType チャートの特徴種別
			FeatureType *FeatureType `json:"feature_type,omitempty"`

			// Saved サーバーに抽出した特徴を保存したか否かのフラグ値
			Saved *bool `json:"saved,omitempty"`
		} `json:"results,omitempty"`
	}
	JSON400 *Error
	JSON500 *Error
}

// Status returns HTTPResponse.Status
func (r PostApiDataFeaturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiDataFeaturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiDataResourceFeaturesIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Items リソース別特徴IDの一覧
		Items *[]struct {
			Features *[]struct {
				FeatureId *string `json:"feature_id,omitempty"`

				// FeatureType チャートの特徴種別
				FeatureType *FeatureType `json:"feature_type,omitempty"`
			} `json:"features,omitempty"`
			ResourceId *string `json:"resource_id,omitempty"`
		} `json:"items,omitempty"`

		// PageToken ページトークン
		PageToken *string `json:"page_token,omitempty"`

		// Total itemsの数
		Total *int `json:"total,omitempty"`
	}
	JSON400 *Error
	JSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetApiDataResourceFeaturesIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiDataResourceFeaturesIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiResourceCandlesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *map[string]interface{}
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteApiResourceCandlesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiResourceCandlesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiResourceCandlesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Candles *[]Candle `json:"candles,omitempty"`

		// Total candlesの数
		Total *int `json:"total,omitempty"`
	}
	JSON400 *Error
	JSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetApiResourceCandlesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiResourceCandlesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiResourceCandlesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *struct {
		// ResourceId 新しく払い出されたローソク足リソースのID
		ResourceId *string `json:"resource_id,omitempty"`
	}
	JSON400 *Error
	JSON500 *Error
}

// Status returns HTTPResponse.Status
func (r PostApiResourceCandlesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiResourceCandlesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiResourceCandlesMetadataResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Items ローソク足リソースのメタデータ一覧
		Items *[]struct {
			// Name リソース名
			Name *string `json:"name,omitempty"`

			// NumCandles 保存されているローソク足の数
			NumCandles *int `json:"num_candles,omitempty"`

			// ResourceId ローソク足リソースのID
			ResourceId *string `json:"resource_id,omitempty"`

			// TimeFrom 保存されているローソク足の最も古い日時
			TimeFrom *string `json:"time_from,omitempty"`

			// TimeTo 保存されているローソク足の最も新しい日時
			TimeTo *string `json:"time_to,omitempty"`
		} `json:"items,omitempty"`

		// PageToken ページトークン
		PageToken *string `json:"page_token,omitempty"`

		// Total itemsの数
		Total *int `json:"total,omitempty"`
	}
	JSON400 *Error
	JSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetApiResourceCandlesMetadataResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiResourceCandlesMetadataResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiSamlAcsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiSamlAcsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiSamlAcsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiSamlLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiSamlLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiSamlLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiSamlLogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetApiSamlLogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiSamlLogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiSamlSloResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApiSamlSloResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiSamlSloResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON204      *map[string]interface{}
	JSON400      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r DeleteApiTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Items []TradeResult `json:"items"`

		// PageToken ページトークン
		PageToken *string `json:"page_token,omitempty"`

		// Total itemsの数
		Total int `json:"total"`
	}
	JSON400 *Error
	JSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetApiTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiTestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Results []TradeResult `json:"results"`

		// Saved テスト結果をサーバーが保存したか否かを示すフラグ値
		Saved bool `json:"saved"`

		// TestResultId テスト結果ID (saveをfalseにした場合は返却されない)
		TestResultId *string `json:"test_result_id,omitempty"`

		// Total resultsの数
		Total int `json:"total"`
	}
	JSON400 *Error
	JSON500 *Error
}

// Status returns HTTPResponse.Status
func (r PostApiTestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiTestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiTestIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Items 取引結果IDの一覧
		Items []string `json:"items"`

		// PageToken ページトークン
		PageToken *string `json:"page_token,omitempty"`

		// Total itemsの数
		Total int `json:"total"`
	}
	JSON400 *Error
	JSON500 *Error
}

// Status returns HTTPResponse.Status
func (r GetApiTestIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiTestIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeleteApiAuthWithResponse request returning *DeleteApiAuthResponse
func (c *ClientWithResponses) DeleteApiAuthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*DeleteApiAuthResponse, error) {
	rsp, err := c.DeleteApiAuth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiAuthResponse(rsp)
}

// GetApiAuthWithResponse request returning *GetApiAuthResponse
func (c *ClientWithResponses) GetApiAuthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiAuthResponse, error) {
	rsp, err := c.GetApiAuth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiAuthResponse(rsp)
}

// PostApiAuthWithBodyWithResponse request with arbitrary body returning *PostApiAuthResponse
func (c *ClientWithResponses) PostApiAuthWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthResponse, error) {
	rsp, err := c.PostApiAuthWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthResponse(rsp)
}

func (c *ClientWithResponses) PostApiAuthWithResponse(ctx context.Context, body PostApiAuthJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthResponse, error) {
	rsp, err := c.PostApiAuth(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthResponse(rsp)
}

// PostApiAuthRefreshWithBodyWithResponse request with arbitrary body returning *PostApiAuthRefreshResponse
func (c *ClientWithResponses) PostApiAuthRefreshWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiAuthRefreshResponse, error) {
	rsp, err := c.PostApiAuthRefreshWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthRefreshResponse(rsp)
}

func (c *ClientWithResponses) PostApiAuthRefreshWithResponse(ctx context.Context, body PostApiAuthRefreshJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiAuthRefreshResponse, error) {
	rsp, err := c.PostApiAuthRefresh(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiAuthRefreshResponse(rsp)
}

// DeleteApiDataFeaturesWithBodyWithResponse request with arbitrary body returning *DeleteApiDataFeaturesResponse
func (c *ClientWithResponses) DeleteApiDataFeaturesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiDataFeaturesResponse, error) {
	rsp, err := c.DeleteApiDataFeaturesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiDataFeaturesResponse(rsp)
}

func (c *ClientWithResponses) DeleteApiDataFeaturesWithResponse(ctx context.Context, body DeleteApiDataFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiDataFeaturesResponse, error) {
	rsp, err := c.DeleteApiDataFeatures(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiDataFeaturesResponse(rsp)
}

// GetApiDataFeaturesWithResponse request returning *GetApiDataFeaturesResponse
func (c *ClientWithResponses) GetApiDataFeaturesWithResponse(ctx context.Context, params *GetApiDataFeaturesParams, reqEditors ...RequestEditorFn) (*GetApiDataFeaturesResponse, error) {
	rsp, err := c.GetApiDataFeatures(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDataFeaturesResponse(rsp)
}

// PostApiDataFeaturesWithBodyWithResponse request with arbitrary body returning *PostApiDataFeaturesResponse
func (c *ClientWithResponses) PostApiDataFeaturesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiDataFeaturesResponse, error) {
	rsp, err := c.PostApiDataFeaturesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiDataFeaturesResponse(rsp)
}

func (c *ClientWithResponses) PostApiDataFeaturesWithResponse(ctx context.Context, body PostApiDataFeaturesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiDataFeaturesResponse, error) {
	rsp, err := c.PostApiDataFeatures(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiDataFeaturesResponse(rsp)
}

// GetApiDataResourceFeaturesIdsWithResponse request returning *GetApiDataResourceFeaturesIdsResponse
func (c *ClientWithResponses) GetApiDataResourceFeaturesIdsWithResponse(ctx context.Context, params *GetApiDataResourceFeaturesIdsParams, reqEditors ...RequestEditorFn) (*GetApiDataResourceFeaturesIdsResponse, error) {
	rsp, err := c.GetApiDataResourceFeaturesIds(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiDataResourceFeaturesIdsResponse(rsp)
}

// DeleteApiResourceCandlesWithBodyWithResponse request with arbitrary body returning *DeleteApiResourceCandlesResponse
func (c *ClientWithResponses) DeleteApiResourceCandlesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiResourceCandlesResponse, error) {
	rsp, err := c.DeleteApiResourceCandlesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiResourceCandlesResponse(rsp)
}

func (c *ClientWithResponses) DeleteApiResourceCandlesWithResponse(ctx context.Context, body DeleteApiResourceCandlesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiResourceCandlesResponse, error) {
	rsp, err := c.DeleteApiResourceCandles(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiResourceCandlesResponse(rsp)
}

// GetApiResourceCandlesWithResponse request returning *GetApiResourceCandlesResponse
func (c *ClientWithResponses) GetApiResourceCandlesWithResponse(ctx context.Context, params *GetApiResourceCandlesParams, reqEditors ...RequestEditorFn) (*GetApiResourceCandlesResponse, error) {
	rsp, err := c.GetApiResourceCandles(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiResourceCandlesResponse(rsp)
}

// PostApiResourceCandlesWithBodyWithResponse request with arbitrary body returning *PostApiResourceCandlesResponse
func (c *ClientWithResponses) PostApiResourceCandlesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiResourceCandlesResponse, error) {
	rsp, err := c.PostApiResourceCandlesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiResourceCandlesResponse(rsp)
}

func (c *ClientWithResponses) PostApiResourceCandlesWithResponse(ctx context.Context, body PostApiResourceCandlesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiResourceCandlesResponse, error) {
	rsp, err := c.PostApiResourceCandles(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiResourceCandlesResponse(rsp)
}

// GetApiResourceCandlesMetadataWithResponse request returning *GetApiResourceCandlesMetadataResponse
func (c *ClientWithResponses) GetApiResourceCandlesMetadataWithResponse(ctx context.Context, params *GetApiResourceCandlesMetadataParams, reqEditors ...RequestEditorFn) (*GetApiResourceCandlesMetadataResponse, error) {
	rsp, err := c.GetApiResourceCandlesMetadata(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiResourceCandlesMetadataResponse(rsp)
}

// PostApiSamlAcsWithResponse request returning *PostApiSamlAcsResponse
func (c *ClientWithResponses) PostApiSamlAcsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiSamlAcsResponse, error) {
	rsp, err := c.PostApiSamlAcs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiSamlAcsResponse(rsp)
}

// GetApiSamlLoginWithResponse request returning *GetApiSamlLoginResponse
func (c *ClientWithResponses) GetApiSamlLoginWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiSamlLoginResponse, error) {
	rsp, err := c.GetApiSamlLogin(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiSamlLoginResponse(rsp)
}

// GetApiSamlLogoutWithResponse request returning *GetApiSamlLogoutResponse
func (c *ClientWithResponses) GetApiSamlLogoutWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiSamlLogoutResponse, error) {
	rsp, err := c.GetApiSamlLogout(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiSamlLogoutResponse(rsp)
}

// PostApiSamlSloWithResponse request returning *PostApiSamlSloResponse
func (c *ClientWithResponses) PostApiSamlSloWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostApiSamlSloResponse, error) {
	rsp, err := c.PostApiSamlSlo(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiSamlSloResponse(rsp)
}

// DeleteApiTestWithBodyWithResponse request with arbitrary body returning *DeleteApiTestResponse
func (c *ClientWithResponses) DeleteApiTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiTestResponse, error) {
	rsp, err := c.DeleteApiTestWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiTestResponse(rsp)
}

func (c *ClientWithResponses) DeleteApiTestWithResponse(ctx context.Context, body DeleteApiTestJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiTestResponse, error) {
	rsp, err := c.DeleteApiTest(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiTestResponse(rsp)
}

// GetApiTestWithResponse request returning *GetApiTestResponse
func (c *ClientWithResponses) GetApiTestWithResponse(ctx context.Context, params *GetApiTestParams, reqEditors ...RequestEditorFn) (*GetApiTestResponse, error) {
	rsp, err := c.GetApiTest(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiTestResponse(rsp)
}

// PostApiTestWithBodyWithResponse request with arbitrary body returning *PostApiTestResponse
func (c *ClientWithResponses) PostApiTestWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiTestResponse, error) {
	rsp, err := c.PostApiTestWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiTestResponse(rsp)
}

func (c *ClientWithResponses) PostApiTestWithResponse(ctx context.Context, body PostApiTestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiTestResponse, error) {
	rsp, err := c.PostApiTest(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiTestResponse(rsp)
}

// GetApiTestIdsWithResponse request returning *GetApiTestIdsResponse
func (c *ClientWithResponses) GetApiTestIdsWithResponse(ctx context.Context, params *GetApiTestIdsParams, reqEditors ...RequestEditorFn) (*GetApiTestIdsResponse, error) {
	rsp, err := c.GetApiTestIds(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiTestIdsResponse(rsp)
}

// ParseDeleteApiAuthResponse parses an HTTP response from a DeleteApiAuthWithResponse call
func ParseDeleteApiAuthResponse(rsp *http.Response) (*DeleteApiAuthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiAuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiAuthResponse parses an HTTP response from a GetApiAuthWithResponse call
func ParseGetApiAuthResponse(rsp *http.Response) (*GetApiAuthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiAuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AuthStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostApiAuthResponse parses an HTTP response from a PostApiAuthWithResponse call
func ParsePostApiAuthResponse(rsp *http.Response) (*PostApiAuthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiAuthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest AuthStatus
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParsePostApiAuthRefreshResponse parses an HTTP response from a PostApiAuthRefreshWithResponse call
func ParsePostApiAuthRefreshResponse(rsp *http.Response) (*PostApiAuthRefreshResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiAuthRefreshResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiDataFeaturesResponse parses an HTTP response from a DeleteApiDataFeaturesWithResponse call
func ParseDeleteApiDataFeaturesResponse(rsp *http.Response) (*DeleteApiDataFeaturesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiDataFeaturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiDataFeaturesResponse parses an HTTP response from a GetApiDataFeaturesWithResponse call
func ParseGetApiDataFeaturesResponse(rsp *http.Response) (*GetApiDataFeaturesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDataFeaturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items *[]struct {
				// CandleIndexes 特徴の発生点となったローソク足のインデックス。発生点の解釈は特徴タイプやパラメータなどによって異なるため仕様を確認すること。
				CandleIndexes *[]string `json:"candle_indexes,omitempty"`

				// FeatureId 特徴ID
				FeatureId *string `json:"feature_id,omitempty"`

				// FeatureType チャートの特徴種別
				FeatureType *FeatureType `json:"feature_type,omitempty"`

				// ResourceId ローソク足リソースのID
				ResourceId *string `json:"resource_id,omitempty"`
			} `json:"items,omitempty"`

			// PageToken ページトークン
			PageToken *string `json:"page_token,omitempty"`

			// Total itemsの数
			Total *int `json:"total,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiDataFeaturesResponse parses an HTTP response from a PostApiDataFeaturesWithResponse call
func ParsePostApiDataFeaturesResponse(rsp *http.Response) (*PostApiDataFeaturesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiDataFeaturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results *[]struct {
				// CandleIndexes 特徴の発生点となったローソク足のインデックス。発生点の解釈は特徴タイプやパラメータなどによって異なるため仕様を確認すること。
				CandleIndexes *[]string `json:"candle_indexes,omitempty"`

				// FeatureId 特徴ID (サーバーに保存していない場合は空文字が返却される)
				FeatureId *string `json:"feature_id,omitempty"`

				// FeatureType チャートの特徴種別
				FeatureType *FeatureType `json:"feature_type,omitempty"`

				// Saved サーバーに抽出した特徴を保存したか否かのフラグ値
				Saved *bool `json:"saved,omitempty"`
			} `json:"results,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiDataResourceFeaturesIdsResponse parses an HTTP response from a GetApiDataResourceFeaturesIdsWithResponse call
func ParseGetApiDataResourceFeaturesIdsResponse(rsp *http.Response) (*GetApiDataResourceFeaturesIdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiDataResourceFeaturesIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Items リソース別特徴IDの一覧
			Items *[]struct {
				Features *[]struct {
					FeatureId *string `json:"feature_id,omitempty"`

					// FeatureType チャートの特徴種別
					FeatureType *FeatureType `json:"feature_type,omitempty"`
				} `json:"features,omitempty"`
				ResourceId *string `json:"resource_id,omitempty"`
			} `json:"items,omitempty"`

			// PageToken ページトークン
			PageToken *string `json:"page_token,omitempty"`

			// Total itemsの数
			Total *int `json:"total,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteApiResourceCandlesResponse parses an HTTP response from a DeleteApiResourceCandlesWithResponse call
func ParseDeleteApiResourceCandlesResponse(rsp *http.Response) (*DeleteApiResourceCandlesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiResourceCandlesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiResourceCandlesResponse parses an HTTP response from a GetApiResourceCandlesWithResponse call
func ParseGetApiResourceCandlesResponse(rsp *http.Response) (*GetApiResourceCandlesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiResourceCandlesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Candles *[]Candle `json:"candles,omitempty"`

			// Total candlesの数
			Total *int `json:"total,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiResourceCandlesResponse parses an HTTP response from a PostApiResourceCandlesWithResponse call
func ParsePostApiResourceCandlesResponse(rsp *http.Response) (*PostApiResourceCandlesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiResourceCandlesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest struct {
			// ResourceId 新しく払い出されたローソク足リソースのID
			ResourceId *string `json:"resource_id,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiResourceCandlesMetadataResponse parses an HTTP response from a GetApiResourceCandlesMetadataWithResponse call
func ParseGetApiResourceCandlesMetadataResponse(rsp *http.Response) (*GetApiResourceCandlesMetadataResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiResourceCandlesMetadataResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Items ローソク足リソースのメタデータ一覧
			Items *[]struct {
				// Name リソース名
				Name *string `json:"name,omitempty"`

				// NumCandles 保存されているローソク足の数
				NumCandles *int `json:"num_candles,omitempty"`

				// ResourceId ローソク足リソースのID
				ResourceId *string `json:"resource_id,omitempty"`

				// TimeFrom 保存されているローソク足の最も古い日時
				TimeFrom *string `json:"time_from,omitempty"`

				// TimeTo 保存されているローソク足の最も新しい日時
				TimeTo *string `json:"time_to,omitempty"`
			} `json:"items,omitempty"`

			// PageToken ページトークン
			PageToken *string `json:"page_token,omitempty"`

			// Total itemsの数
			Total *int `json:"total,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiSamlAcsResponse parses an HTTP response from a PostApiSamlAcsWithResponse call
func ParsePostApiSamlAcsResponse(rsp *http.Response) (*PostApiSamlAcsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiSamlAcsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiSamlLoginResponse parses an HTTP response from a GetApiSamlLoginWithResponse call
func ParseGetApiSamlLoginResponse(rsp *http.Response) (*GetApiSamlLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiSamlLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetApiSamlLogoutResponse parses an HTTP response from a GetApiSamlLogoutWithResponse call
func ParseGetApiSamlLogoutResponse(rsp *http.Response) (*GetApiSamlLogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiSamlLogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostApiSamlSloResponse parses an HTTP response from a PostApiSamlSloWithResponse call
func ParsePostApiSamlSloResponse(rsp *http.Response) (*PostApiSamlSloResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiSamlSloResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseDeleteApiTestResponse parses an HTTP response from a DeleteApiTestWithResponse call
func ParseDeleteApiTestResponse(rsp *http.Response) (*DeleteApiTestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 204:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON204 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiTestResponse parses an HTTP response from a GetApiTestWithResponse call
func ParseGetApiTestResponse(rsp *http.Response) (*GetApiTestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Items []TradeResult `json:"items"`

			// PageToken ページトークン
			PageToken *string `json:"page_token,omitempty"`

			// Total itemsの数
			Total int `json:"total"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostApiTestResponse parses an HTTP response from a PostApiTestWithResponse call
func ParsePostApiTestResponse(rsp *http.Response) (*PostApiTestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiTestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Results []TradeResult `json:"results"`

			// Saved テスト結果をサーバーが保存したか否かを示すフラグ値
			Saved bool `json:"saved"`

			// TestResultId テスト結果ID (saveをfalseにした場合は返却されない)
			TestResultId *string `json:"test_result_id,omitempty"`

			// Total resultsの数
			Total int `json:"total"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetApiTestIdsResponse parses an HTTP response from a GetApiTestIdsWithResponse call
func ParseGetApiTestIdsResponse(rsp *http.Response) (*GetApiTestIdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiTestIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Items 取引結果IDの一覧
			Items []string `json:"items"`

			// PageToken ページトークン
			PageToken *string `json:"page_token,omitempty"`

			// Total itemsの数
			Total int `json:"total"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (DELETE /api/auth)
	DeleteApiAuth(ctx echo.Context) error

	// (GET /api/auth)
	GetApiAuth(ctx echo.Context) error

	// (POST /api/auth)
	PostApiAuth(ctx echo.Context) error

	// (POST /api/auth/refresh)
	PostApiAuthRefresh(ctx echo.Context) error

	// (DELETE /api/data/features)
	DeleteApiDataFeatures(ctx echo.Context) error

	// (GET /api/data/features)
	GetApiDataFeatures(ctx echo.Context, params GetApiDataFeaturesParams) error

	// (POST /api/data/features)
	PostApiDataFeatures(ctx echo.Context) error

	// (GET /api/data/resource/features/ids)
	GetApiDataResourceFeaturesIds(ctx echo.Context, params GetApiDataResourceFeaturesIdsParams) error

	// (DELETE /api/resource/candles)
	DeleteApiResourceCandles(ctx echo.Context) error

	// (GET /api/resource/candles)
	GetApiResourceCandles(ctx echo.Context, params GetApiResourceCandlesParams) error

	// (POST /api/resource/candles)
	PostApiResourceCandles(ctx echo.Context) error

	// (GET /api/resource/candles/metadata)
	GetApiResourceCandlesMetadata(ctx echo.Context, params GetApiResourceCandlesMetadataParams) error

	// (POST /api/saml/acs)
	PostApiSamlAcs(ctx echo.Context) error

	// (GET /api/saml/login)
	GetApiSamlLogin(ctx echo.Context) error

	// (GET /api/saml/logout)
	GetApiSamlLogout(ctx echo.Context) error

	// (POST /api/saml/slo)
	PostApiSamlSlo(ctx echo.Context) error

	// (DELETE /api/test)
	DeleteApiTest(ctx echo.Context) error

	// (GET /api/test)
	GetApiTest(ctx echo.Context, params GetApiTestParams) error

	// (POST /api/test)
	PostApiTest(ctx echo.Context) error

	// (GET /api/test/ids)
	GetApiTestIds(ctx echo.Context, params GetApiTestIdsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// DeleteApiAuth converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApiAuth(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteApiAuth(ctx)
	return err
}

// GetApiAuth converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiAuth(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiAuth(ctx)
	return err
}

// PostApiAuth converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiAuth(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiAuth(ctx)
	return err
}

// PostApiAuthRefresh converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiAuthRefresh(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiAuthRefresh(ctx)
	return err
}

// DeleteApiDataFeatures converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApiDataFeatures(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteApiDataFeatures(ctx)
	return err
}

// GetApiDataFeatures converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiDataFeatures(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiDataFeaturesParams
	// ------------- Required query parameter "feature_ids" -------------

	err = runtime.BindQueryParameter("form", true, true, "feature_ids", ctx.QueryParams(), &params.FeatureIds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter feature_ids: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", ctx.QueryParams(), &params.PageToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_token: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiDataFeatures(ctx, params)
	return err
}

// PostApiDataFeatures converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiDataFeatures(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiDataFeatures(ctx)
	return err
}

// GetApiDataResourceFeaturesIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiDataResourceFeaturesIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiDataResourceFeaturesIdsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", ctx.QueryParams(), &params.PageToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_token: %s", err))
	}

	// ------------- Optional query parameter "resource_ids" -------------

	err = runtime.BindQueryParameter("form", true, false, "resource_ids", ctx.QueryParams(), &params.ResourceIds)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_ids: %s", err))
	}

	// ------------- Optional query parameter "feature_type" -------------

	err = runtime.BindQueryParameter("form", true, false, "feature_type", ctx.QueryParams(), &params.FeatureType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter feature_type: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiDataResourceFeaturesIds(ctx, params)
	return err
}

// DeleteApiResourceCandles converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApiResourceCandles(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteApiResourceCandles(ctx)
	return err
}

// GetApiResourceCandles converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiResourceCandles(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiResourceCandlesParams
	// ------------- Required query parameter "resource_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "resource_id", ctx.QueryParams(), &params.ResourceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter resource_id: %s", err))
	}

	// ------------- Optional query parameter "time_at" -------------

	err = runtime.BindQueryParameter("form", true, false, "time_at", ctx.QueryParams(), &params.TimeAt)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_at: %s", err))
	}

	// ------------- Optional query parameter "time_including" -------------

	err = runtime.BindQueryParameter("form", true, false, "time_including", ctx.QueryParams(), &params.TimeIncluding)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_including: %s", err))
	}

	// ------------- Optional query parameter "time_range_start" -------------

	err = runtime.BindQueryParameter("form", true, false, "time_range_start", ctx.QueryParams(), &params.TimeRangeStart)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_range_start: %s", err))
	}

	// ------------- Optional query parameter "time_range_end" -------------

	err = runtime.BindQueryParameter("form", true, false, "time_range_end", ctx.QueryParams(), &params.TimeRangeEnd)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter time_range_end: %s", err))
	}

	// ------------- Optional query parameter "index" -------------

	err = runtime.BindQueryParameter("form", true, false, "index", ctx.QueryParams(), &params.Index)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter index: %s", err))
	}

	// ------------- Optional query parameter "left" -------------

	err = runtime.BindQueryParameter("form", true, false, "left", ctx.QueryParams(), &params.Left)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter left: %s", err))
	}

	// ------------- Optional query parameter "right" -------------

	err = runtime.BindQueryParameter("form", true, false, "right", ctx.QueryParams(), &params.Right)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter right: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiResourceCandles(ctx, params)
	return err
}

// PostApiResourceCandles converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiResourceCandles(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiResourceCandles(ctx)
	return err
}

// GetApiResourceCandlesMetadata converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiResourceCandlesMetadata(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiResourceCandlesMetadataParams
	// ------------- Required query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", ctx.QueryParams(), &params.PageToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_token: %s", err))
	}

	// ------------- Optional query parameter "keyword" -------------

	err = runtime.BindQueryParameter("form", true, false, "keyword", ctx.QueryParams(), &params.Keyword)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter keyword: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiResourceCandlesMetadata(ctx, params)
	return err
}

// PostApiSamlAcs converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiSamlAcs(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiSamlAcs(ctx)
	return err
}

// GetApiSamlLogin converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiSamlLogin(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiSamlLogin(ctx)
	return err
}

// GetApiSamlLogout converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiSamlLogout(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiSamlLogout(ctx)
	return err
}

// PostApiSamlSlo converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiSamlSlo(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiSamlSlo(ctx)
	return err
}

// DeleteApiTest converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApiTest(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteApiTest(ctx)
	return err
}

// GetApiTest converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiTest(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiTestParams
	// ------------- Required query parameter "test_result_id" -------------

	err = runtime.BindQueryParameter("form", true, true, "test_result_id", ctx.QueryParams(), &params.TestResultId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter test_result_id: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", ctx.QueryParams(), &params.PageToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_token: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiTest(ctx, params)
	return err
}

// PostApiTest converts echo context to params.
func (w *ServerInterfaceWrapper) PostApiTest(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostApiTest(ctx)
	return err
}

// GetApiTestIds converts echo context to params.
func (w *ServerInterfaceWrapper) GetApiTestIds(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetApiTestIdsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "page_token" -------------

	err = runtime.BindQueryParameter("form", true, false, "page_token", ctx.QueryParams(), &params.PageToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page_token: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetApiTestIds(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.DELETE(baseURL+"/api/auth", wrapper.DeleteApiAuth)
	router.GET(baseURL+"/api/auth", wrapper.GetApiAuth)
	router.POST(baseURL+"/api/auth", wrapper.PostApiAuth)
	router.POST(baseURL+"/api/auth/refresh", wrapper.PostApiAuthRefresh)
	router.DELETE(baseURL+"/api/data/features", wrapper.DeleteApiDataFeatures)
	router.GET(baseURL+"/api/data/features", wrapper.GetApiDataFeatures)
	router.POST(baseURL+"/api/data/features", wrapper.PostApiDataFeatures)
	router.GET(baseURL+"/api/data/resource/features/ids", wrapper.GetApiDataResourceFeaturesIds)
	router.DELETE(baseURL+"/api/resource/candles", wrapper.DeleteApiResourceCandles)
	router.GET(baseURL+"/api/resource/candles", wrapper.GetApiResourceCandles)
	router.POST(baseURL+"/api/resource/candles", wrapper.PostApiResourceCandles)
	router.GET(baseURL+"/api/resource/candles/metadata", wrapper.GetApiResourceCandlesMetadata)
	router.POST(baseURL+"/api/saml/acs", wrapper.PostApiSamlAcs)
	router.GET(baseURL+"/api/saml/login", wrapper.GetApiSamlLogin)
	router.GET(baseURL+"/api/saml/logout", wrapper.GetApiSamlLogout)
	router.POST(baseURL+"/api/saml/slo", wrapper.PostApiSamlSlo)
	router.DELETE(baseURL+"/api/test", wrapper.DeleteApiTest)
	router.GET(baseURL+"/api/test", wrapper.GetApiTest)
	router.POST(baseURL+"/api/test", wrapper.PostApiTest)
	router.GET(baseURL+"/api/test/ids", wrapper.GetApiTestIds)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
