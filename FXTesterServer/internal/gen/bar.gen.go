// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for PostZigzagRequestType.
const (
	PostZigzagRequestTypeCandles PostZigzagRequestType = "candles"
	PostZigzagRequestTypeCsv     PostZigzagRequestType = "csv"
)

// Candle ローソク足
type Candle struct {
	// Close 終値
	Close *float32 `json:"close,omitempty"`

	// High 高値
	High *float32 `json:"high,omitempty"`

	// Low 安値
	Low *float32 `json:"low,omitempty"`

	// Open 始値
	Open *float32 `json:"open,omitempty"`

	// Time 日時
	Time *string `json:"time,omitempty"`
}

// Candles ローソク足配列
type Candles = []Candle

// CsvInfo defines model for CsvInfo.
type CsvInfo struct {
	// CloseColumnIndex 終値カラムのインデックス番号(0始まり)
	CloseColumnIndex int `json:"closeColumnIndex"`

	// DelimiterChar csvファイルの区切り文字
	DelimiterChar *string `json:"delimiterChar,omitempty"`

	// ExistsHeader csvにヘッダ行が存在するか
	ExistsHeader *bool `json:"existsHeader,omitempty"`

	// HighColumnIndex 高値カラムのインデックス番号(0始まり)
	HighColumnIndex int `json:"highColumnIndex"`

	// LowColumnIndex 安値カラムのインデックス番号(0始まり)
	LowColumnIndex int `json:"lowColumnIndex"`

	// OpenColumnIndex 始値カラムのインデックス番号(0始まり)
	OpenColumnIndex int `json:"openColumnIndex"`

	// TimeColumnIndex 時間カラムのインデックス番号(0始まり)
	TimeColumnIndex int `json:"timeColumnIndex"`
}

// Error defines model for Error.
type Error struct {
	// Code サーバー内部で使用しているエラーコード
	Code uint32 `json:"code"`

	// Message エラーメッセージ (多言語化対象)
	Message string `json:"message"`
}

// ErrorWithTime defines model for ErrorWithTime.
type ErrorWithTime struct {
	Err  Error  `json:"err"`
	Time string `json:"time"`
}

// File ファイルのテキストまたはバイナリデータ
type File = openapi_types.File

// PostZigzagRequest defines model for PostZigzagRequest.
type PostZigzagRequest struct {
	// Candles ローソク足配列
	Candles *Candles `json:"candles,omitempty"`

	// Csv ファイルのテキストまたはバイナリデータ
	Csv     *File    `json:"csv,omitempty"`
	CsvInfo *CsvInfo `json:"csvInfo,omitempty"`

	// Type 入力データのタイプ
	Type PostZigzagRequestType `json:"type"`
}

// PostZigzagRequestType 入力データのタイプ
type PostZigzagRequestType string

// PostZigzagResult defines model for PostZigzagResult.
type PostZigzagResult struct {
	// Uuid 進捗率を受け取るためのUUID
	Uuid string `json:"uuid"`
}

// SAMLForm defines model for SAMLForm.
type SAMLForm = string

// SAMLRequest defines model for SAMLRequest.
type SAMLRequest struct {
	RelayState  *string `json:"RelayState,omitempty"`
	SAMLReqeust *string `json:"SAMLReqeust,omitempty"`
}

// SAMLResponse defines model for SAMLResponse.
type SAMLResponse struct {
	RelayState   *string `json:"RelayState,omitempty"`
	SAMLResponse *string `json:"SAMLResponse,omitempty"`
}

// GetSamlLoginParams defines parameters for GetSamlLogin.
type GetSamlLoginParams struct {
	// XRedirectURL シングルサインオン完了時にリダイレクトさせたいURLを指定する
	XRedirectURL string `json:"X-Redirect-URL"`

	// XRedirectURLOnError シングルサインオンエラー時にリダイレクトさせたいURLを指定する
	XRedirectURLOnError string `json:"X-Redirect-URL-On-Error"`
}

// GetSamlLogoutParams defines parameters for GetSamlLogout.
type GetSamlLogoutParams struct {
	// XRedirectURL シングルログアウト完了時にリダイレクトさせたいURLを指定する
	XRedirectURL string `json:"X-Redirect-URL"`

	// XRedirectURLOnError シングルログアウトのエラー時にリダイレクトさせたいURLを指定する
	XRedirectURLOnError string `json:"X-Redirect-URL-On-Error"`
}

// PostSamlSloFormdataBody defines parameters for PostSamlSlo.
type PostSamlSloFormdataBody struct {
	union json.RawMessage
}

// GetZigzagParams defines parameters for GetZigzag.
type GetZigzagParams struct {
	// Uuid ZigzagデータのUUID
	Uuid *string `form:"uuid,omitempty" json:"uuid,omitempty"`
}

// PostSamlAcsFormdataRequestBody defines body for PostSamlAcs for application/x-www-form-urlencoded ContentType.
type PostSamlAcsFormdataRequestBody = SAMLResponse

// PostSamlSloFormdataRequestBody defines body for PostSamlSlo for application/x-www-form-urlencoded ContentType.
type PostSamlSloFormdataRequestBody PostSamlSloFormdataBody

// PostZigzagMultipartRequestBody defines body for PostZigzag for multipart/form-data ContentType.
type PostZigzagMultipartRequestBody = PostZigzagRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostSamlAcsWithBody request with any body
	PostSamlAcsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSamlAcsWithFormdataBody(ctx context.Context, body PostSamlAcsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSamlError request
	GetSamlError(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSamlLogin request
	GetSamlLogin(ctx context.Context, params *GetSamlLoginParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSamlLogout request
	GetSamlLogout(ctx context.Context, params *GetSamlLogoutParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSamlSloWithBody request with any body
	PostSamlSloWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSamlSloWithFormdataBody(ctx context.Context, body PostSamlSloFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWsUuid request
	GetWsUuid(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetZigzag request
	GetZigzag(ctx context.Context, params *GetZigzagParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostZigzagWithBody request with any body
	PostZigzagWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostSamlAcsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSamlAcsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSamlAcsWithFormdataBody(ctx context.Context, body PostSamlAcsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSamlAcsRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSamlError(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSamlErrorRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSamlLogin(ctx context.Context, params *GetSamlLoginParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSamlLoginRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSamlLogout(ctx context.Context, params *GetSamlLogoutParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSamlLogoutRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSamlSloWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSamlSloRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSamlSloWithFormdataBody(ctx context.Context, body PostSamlSloFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSamlSloRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWsUuid(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWsUuidRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetZigzag(ctx context.Context, params *GetZigzagParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetZigzagRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostZigzagWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostZigzagRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostSamlAcsRequestWithFormdataBody calls the generic PostSamlAcs builder with application/x-www-form-urlencoded body
func NewPostSamlAcsRequestWithFormdataBody(server string, body PostSamlAcsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostSamlAcsRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostSamlAcsRequestWithBody generates requests for PostSamlAcs with any type of body
func NewPostSamlAcsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/saml/acs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSamlErrorRequest generates requests for GetSamlError
func NewGetSamlErrorRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/saml/error")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSamlLoginRequest generates requests for GetSamlLogin
func NewGetSamlLoginRequest(server string, params *GetSamlLoginParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/saml/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Redirect-URL", runtime.ParamLocationHeader, params.XRedirectURL)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Redirect-URL", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Redirect-URL-On-Error", runtime.ParamLocationHeader, params.XRedirectURLOnError)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Redirect-URL-On-Error", headerParam1)

	}

	return req, nil
}

// NewGetSamlLogoutRequest generates requests for GetSamlLogout
func NewGetSamlLogoutRequest(server string, params *GetSamlLogoutParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/saml/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Redirect-URL", runtime.ParamLocationHeader, params.XRedirectURL)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Redirect-URL", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Redirect-URL-On-Error", runtime.ParamLocationHeader, params.XRedirectURLOnError)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Redirect-URL-On-Error", headerParam1)

	}

	return req, nil
}

// NewPostSamlSloRequestWithFormdataBody calls the generic PostSamlSlo builder with application/x-www-form-urlencoded body
func NewPostSamlSloRequestWithFormdataBody(server string, body PostSamlSloFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostSamlSloRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostSamlSloRequestWithBody generates requests for PostSamlSlo with any type of body
func NewPostSamlSloRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/saml/slo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWsUuidRequest generates requests for GetWsUuid
func NewGetWsUuidRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws/:uuid")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetZigzagRequest generates requests for GetZigzag
func NewGetZigzagRequest(server string, params *GetZigzagParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/zigzag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Uuid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "uuid", runtime.ParamLocationQuery, *params.Uuid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostZigzagRequestWithBody generates requests for PostZigzag with any type of body
func NewPostZigzagRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/zigzag")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostSamlAcsWithBodyWithResponse request with any body
	PostSamlAcsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSamlAcsResponse, error)

	PostSamlAcsWithFormdataBodyWithResponse(ctx context.Context, body PostSamlAcsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSamlAcsResponse, error)

	// GetSamlErrorWithResponse request
	GetSamlErrorWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSamlErrorResponse, error)

	// GetSamlLoginWithResponse request
	GetSamlLoginWithResponse(ctx context.Context, params *GetSamlLoginParams, reqEditors ...RequestEditorFn) (*GetSamlLoginResponse, error)

	// GetSamlLogoutWithResponse request
	GetSamlLogoutWithResponse(ctx context.Context, params *GetSamlLogoutParams, reqEditors ...RequestEditorFn) (*GetSamlLogoutResponse, error)

	// PostSamlSloWithBodyWithResponse request with any body
	PostSamlSloWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSamlSloResponse, error)

	PostSamlSloWithFormdataBodyWithResponse(ctx context.Context, body PostSamlSloFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSamlSloResponse, error)

	// GetWsUuidWithResponse request
	GetWsUuidWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWsUuidResponse, error)

	// GetZigzagWithResponse request
	GetZigzagWithResponse(ctx context.Context, params *GetZigzagParams, reqEditors ...RequestEditorFn) (*GetZigzagResponse, error)

	// PostZigzagWithBodyWithResponse request with any body
	PostZigzagWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostZigzagResponse, error)
}

type PostSamlAcsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSamlAcsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSamlAcsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSamlErrorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ErrorWithTime
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetSamlErrorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSamlErrorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSamlLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetSamlLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSamlLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSamlLogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetSamlLogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSamlLogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSamlSloResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSamlSloResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSamlSloResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWsUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetWsUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWsUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetZigzagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *Error
	JSON401      *Error
	JSON404      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetZigzagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetZigzagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostZigzagResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *PostZigzagResult
	JSON400      *Error
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostZigzagResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostZigzagResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostSamlAcsWithBodyWithResponse request with arbitrary body returning *PostSamlAcsResponse
func (c *ClientWithResponses) PostSamlAcsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSamlAcsResponse, error) {
	rsp, err := c.PostSamlAcsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSamlAcsResponse(rsp)
}

func (c *ClientWithResponses) PostSamlAcsWithFormdataBodyWithResponse(ctx context.Context, body PostSamlAcsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSamlAcsResponse, error) {
	rsp, err := c.PostSamlAcsWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSamlAcsResponse(rsp)
}

// GetSamlErrorWithResponse request returning *GetSamlErrorResponse
func (c *ClientWithResponses) GetSamlErrorWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSamlErrorResponse, error) {
	rsp, err := c.GetSamlError(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSamlErrorResponse(rsp)
}

// GetSamlLoginWithResponse request returning *GetSamlLoginResponse
func (c *ClientWithResponses) GetSamlLoginWithResponse(ctx context.Context, params *GetSamlLoginParams, reqEditors ...RequestEditorFn) (*GetSamlLoginResponse, error) {
	rsp, err := c.GetSamlLogin(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSamlLoginResponse(rsp)
}

// GetSamlLogoutWithResponse request returning *GetSamlLogoutResponse
func (c *ClientWithResponses) GetSamlLogoutWithResponse(ctx context.Context, params *GetSamlLogoutParams, reqEditors ...RequestEditorFn) (*GetSamlLogoutResponse, error) {
	rsp, err := c.GetSamlLogout(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSamlLogoutResponse(rsp)
}

// PostSamlSloWithBodyWithResponse request with arbitrary body returning *PostSamlSloResponse
func (c *ClientWithResponses) PostSamlSloWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSamlSloResponse, error) {
	rsp, err := c.PostSamlSloWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSamlSloResponse(rsp)
}

func (c *ClientWithResponses) PostSamlSloWithFormdataBodyWithResponse(ctx context.Context, body PostSamlSloFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSamlSloResponse, error) {
	rsp, err := c.PostSamlSloWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSamlSloResponse(rsp)
}

// GetWsUuidWithResponse request returning *GetWsUuidResponse
func (c *ClientWithResponses) GetWsUuidWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWsUuidResponse, error) {
	rsp, err := c.GetWsUuid(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWsUuidResponse(rsp)
}

// GetZigzagWithResponse request returning *GetZigzagResponse
func (c *ClientWithResponses) GetZigzagWithResponse(ctx context.Context, params *GetZigzagParams, reqEditors ...RequestEditorFn) (*GetZigzagResponse, error) {
	rsp, err := c.GetZigzag(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetZigzagResponse(rsp)
}

// PostZigzagWithBodyWithResponse request with arbitrary body returning *PostZigzagResponse
func (c *ClientWithResponses) PostZigzagWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostZigzagResponse, error) {
	rsp, err := c.PostZigzagWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostZigzagResponse(rsp)
}

// ParsePostSamlAcsResponse parses an HTTP response from a PostSamlAcsWithResponse call
func ParsePostSamlAcsResponse(rsp *http.Response) (*PostSamlAcsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSamlAcsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSamlErrorResponse parses an HTTP response from a GetSamlErrorWithResponse call
func ParseGetSamlErrorResponse(rsp *http.Response) (*GetSamlErrorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSamlErrorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ErrorWithTime
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetSamlLoginResponse parses an HTTP response from a GetSamlLoginWithResponse call
func ParseGetSamlLoginResponse(rsp *http.Response) (*GetSamlLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSamlLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetSamlLogoutResponse parses an HTTP response from a GetSamlLogoutWithResponse call
func ParseGetSamlLogoutResponse(rsp *http.Response) (*GetSamlLogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSamlLogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSamlSloResponse parses an HTTP response from a PostSamlSloWithResponse call
func ParsePostSamlSloResponse(rsp *http.Response) (*PostSamlSloResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSamlSloResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWsUuidResponse parses an HTTP response from a GetWsUuidWithResponse call
func ParseGetWsUuidResponse(rsp *http.Response) (*GetWsUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWsUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetZigzagResponse parses an HTTP response from a GetZigzagWithResponse call
func ParseGetZigzagResponse(rsp *http.Response) (*GetZigzagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetZigzagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostZigzagResponse parses an HTTP response from a PostZigzagWithResponse call
func ParsePostZigzagResponse(rsp *http.Response) (*PostZigzagResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostZigzagResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest PostZigzagResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// IdPから受け取る認証レスポンス（SAMLアサーション）を処理するエンドポイント。
	// (POST /saml/acs)
	PostSamlAcs(ctx echo.Context) error
	// SAMLログインのエラー詳細を返却するエンドポイント
	// (GET /saml/error)
	GetSamlError(ctx echo.Context) error
	// ユーザをシングルサインオンさせるログインリクエストを作成し、FormのPOSTによってidPに送信するスクリプトタグを含んだHTMLを返却するエンドポイント。
	// (GET /saml/login)
	GetSamlLogin(ctx echo.Context, params GetSamlLoginParams) error
	// ユーザをログアウトさせるログアウトリクエストを作成し、FormのPOSTによってidPに送信するスクリプトタグを含んだHTMLを返却するエンドポイント。
	// (GET /saml/logout)
	GetSamlLogout(ctx echo.Context, params GetSamlLogoutParams) error
	// IdPから受け取るログアウトリクエストを処理し、ユーザーをログアウトさせるエンドポイント。
	// (POST /saml/slo)
	PostSamlSlo(ctx echo.Context) error
	// Websocketと接続を行うためのエンドポイント。
	// (GET /ws/:uuid)
	GetWsUuid(ctx echo.Context) error
	// Zigzagデータを返却するためのエンドポイント。
	// (GET /zigzag)
	GetZigzag(ctx echo.Context, params GetZigzagParams) error
	// CSVまたはローソク足のデータをアップロードし、Zigzagのデータを作成するエンドポイント。
	// (POST /zigzag)
	PostZigzag(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostSamlAcs converts echo context to params.
func (w *ServerInterfaceWrapper) PostSamlAcs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSamlAcs(ctx)
	return err
}

// GetSamlError converts echo context to params.
func (w *ServerInterfaceWrapper) GetSamlError(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSamlError(ctx)
	return err
}

// GetSamlLogin converts echo context to params.
func (w *ServerInterfaceWrapper) GetSamlLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSamlLoginParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Redirect-URL" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Redirect-URL")]; found {
		var XRedirectURL string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Redirect-URL, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Redirect-URL", runtime.ParamLocationHeader, valueList[0], &XRedirectURL)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Redirect-URL: %s", err))
		}

		params.XRedirectURL = XRedirectURL
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Redirect-URL is required, but not found"))
	}
	// ------------- Required header parameter "X-Redirect-URL-On-Error" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Redirect-URL-On-Error")]; found {
		var XRedirectURLOnError string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Redirect-URL-On-Error, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Redirect-URL-On-Error", runtime.ParamLocationHeader, valueList[0], &XRedirectURLOnError)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Redirect-URL-On-Error: %s", err))
		}

		params.XRedirectURLOnError = XRedirectURLOnError
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Redirect-URL-On-Error is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSamlLogin(ctx, params)
	return err
}

// GetSamlLogout converts echo context to params.
func (w *ServerInterfaceWrapper) GetSamlLogout(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSamlLogoutParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Redirect-URL" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Redirect-URL")]; found {
		var XRedirectURL string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Redirect-URL, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Redirect-URL", runtime.ParamLocationHeader, valueList[0], &XRedirectURL)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Redirect-URL: %s", err))
		}

		params.XRedirectURL = XRedirectURL
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Redirect-URL is required, but not found"))
	}
	// ------------- Required header parameter "X-Redirect-URL-On-Error" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Redirect-URL-On-Error")]; found {
		var XRedirectURLOnError string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Redirect-URL-On-Error, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Redirect-URL-On-Error", runtime.ParamLocationHeader, valueList[0], &XRedirectURLOnError)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Redirect-URL-On-Error: %s", err))
		}

		params.XRedirectURLOnError = XRedirectURLOnError
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Redirect-URL-On-Error is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSamlLogout(ctx, params)
	return err
}

// PostSamlSlo converts echo context to params.
func (w *ServerInterfaceWrapper) PostSamlSlo(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSamlSlo(ctx)
	return err
}

// GetWsUuid converts echo context to params.
func (w *ServerInterfaceWrapper) GetWsUuid(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWsUuid(ctx)
	return err
}

// GetZigzag converts echo context to params.
func (w *ServerInterfaceWrapper) GetZigzag(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetZigzagParams
	// ------------- Optional query parameter "uuid" -------------

	err = runtime.BindQueryParameter("form", true, false, "uuid", ctx.QueryParams(), &params.Uuid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter uuid: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetZigzag(ctx, params)
	return err
}

// PostZigzag converts echo context to params.
func (w *ServerInterfaceWrapper) PostZigzag(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostZigzag(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/saml/acs", wrapper.PostSamlAcs)
	router.GET(baseURL+"/saml/error", wrapper.GetSamlError)
	router.GET(baseURL+"/saml/login", wrapper.GetSamlLogin)
	router.GET(baseURL+"/saml/logout", wrapper.GetSamlLogout)
	router.POST(baseURL+"/saml/slo", wrapper.PostSamlSlo)
	router.GET(baseURL+"/ws/:uuid", wrapper.GetWsUuid)
	router.GET(baseURL+"/zigzag", wrapper.GetZigzag)
	router.POST(baseURL+"/zigzag", wrapper.PostZigzag)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//ZLLxAwQwAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
