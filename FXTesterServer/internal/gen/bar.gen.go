// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
	CookieAuthScopes = "cookieAuth.Scopes"
)

// Defines values for CreateFeaturePointsRequestFileType.
const (
	MT4CSV CreateFeaturePointsRequestFileType = "MT4_CSV"
)

// CreateFeaturePointsRequest defines model for CreateFeaturePointsRequest.
type CreateFeaturePointsRequest struct {
	// FileName ファイルのテキストまたはバイナリデータ
	FileName *openapi_types.File `json:"fileName,omitempty"`

	// FileType ファイルタイプ
	FileType *CreateFeaturePointsRequestFileType `json:"fileType,omitempty"`
}

// CreateFeaturePointsRequestFileType ファイルタイプ
type CreateFeaturePointsRequestFileType string

// CreateFeaturePointsResult defines model for CreateFeaturePointsResult.
type CreateFeaturePointsResult struct {
	// Uuid 進捗率を受け取るためのUUID
	Uuid string `json:"uuid"`
}

// Error defines model for Error.
type Error struct {
	// Code サーバー内部で使用しているエラーコード
	Code uint32 `json:"code"`

	// Message エラーメッセージ (多言語化対象)
	Message string `json:"message"`
}

// ErrorWithTime defines model for ErrorWithTime.
type ErrorWithTime struct {
	Err  Error  `json:"err"`
	Time string `json:"time"`
}

// SAMLForm defines model for SAMLForm.
type SAMLForm = string

// SAMLRequest defines model for SAMLRequest.
type SAMLRequest struct {
	RelayState  *string `json:"RelayState,omitempty"`
	SAMLReqeust *string `json:"SAMLReqeust,omitempty"`
}

// SAMLResponse defines model for SAMLResponse.
type SAMLResponse struct {
	RelayState   *string `json:"RelayState,omitempty"`
	SAMLResponse *string `json:"SAMLResponse,omitempty"`
}

// GetSamlLoginParams defines parameters for GetSamlLogin.
type GetSamlLoginParams struct {
	// XRedirectURL シングルサインオン完了時にリダイレクトさせたいURLを指定する
	XRedirectURL string `json:"X-Redirect-URL"`

	// XRedirectURLOnError シングルサインオンエラー時にリダイレクトさせたいURLを指定する
	XRedirectURLOnError string `json:"X-Redirect-URL-On-Error"`
}

// GetSamlLogoutParams defines parameters for GetSamlLogout.
type GetSamlLogoutParams struct {
	// XRedirectURL シングルログアウト完了時にリダイレクトさせたいURLを指定する
	XRedirectURL string `json:"X-Redirect-URL"`

	// XRedirectURLOnError シングルログアウトのエラー時にリダイレクトさせたいURLを指定する
	XRedirectURLOnError string `json:"X-Redirect-URL-On-Error"`
}

// PostSamlSloFormdataBody defines parameters for PostSamlSlo.
type PostSamlSloFormdataBody struct {
	union json.RawMessage
}

// PostFeaturePointsMultipartRequestBody defines body for PostFeaturePoints for multipart/form-data ContentType.
type PostFeaturePointsMultipartRequestBody = CreateFeaturePointsRequest

// PostSamlAcsFormdataRequestBody defines body for PostSamlAcs for application/x-www-form-urlencoded ContentType.
type PostSamlAcsFormdataRequestBody = SAMLResponse

// PostSamlSloFormdataRequestBody defines body for PostSamlSlo for application/x-www-form-urlencoded ContentType.
type PostSamlSloFormdataRequestBody PostSamlSloFormdataBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostFeaturePointsWithBody request with any body
	PostFeaturePointsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSamlAcsWithBody request with any body
	PostSamlAcsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSamlAcsWithFormdataBody(ctx context.Context, body PostSamlAcsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSamlError request
	GetSamlError(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSamlLogin request
	GetSamlLogin(ctx context.Context, params *GetSamlLoginParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSamlLogout request
	GetSamlLogout(ctx context.Context, params *GetSamlLogoutParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSamlSloWithBody request with any body
	PostSamlSloWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostSamlSloWithFormdataBody(ctx context.Context, body PostSamlSloFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetWsUuid request
	GetWsUuid(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostFeaturePointsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostFeaturePointsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSamlAcsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSamlAcsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSamlAcsWithFormdataBody(ctx context.Context, body PostSamlAcsFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSamlAcsRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSamlError(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSamlErrorRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSamlLogin(ctx context.Context, params *GetSamlLoginParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSamlLoginRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSamlLogout(ctx context.Context, params *GetSamlLogoutParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSamlLogoutRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSamlSloWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSamlSloRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSamlSloWithFormdataBody(ctx context.Context, body PostSamlSloFormdataRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSamlSloRequestWithFormdataBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetWsUuid(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetWsUuidRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostFeaturePointsRequestWithBody generates requests for PostFeaturePoints with any type of body
func NewPostFeaturePointsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/feature_points")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostSamlAcsRequestWithFormdataBody calls the generic PostSamlAcs builder with application/x-www-form-urlencoded body
func NewPostSamlAcsRequestWithFormdataBody(server string, body PostSamlAcsFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostSamlAcsRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostSamlAcsRequestWithBody generates requests for PostSamlAcs with any type of body
func NewPostSamlAcsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/saml/acs")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetSamlErrorRequest generates requests for GetSamlError
func NewGetSamlErrorRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/saml/error")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSamlLoginRequest generates requests for GetSamlLogin
func NewGetSamlLoginRequest(server string, params *GetSamlLoginParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/saml/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Redirect-URL", runtime.ParamLocationHeader, params.XRedirectURL)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Redirect-URL", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Redirect-URL-On-Error", runtime.ParamLocationHeader, params.XRedirectURLOnError)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Redirect-URL-On-Error", headerParam1)

	}

	return req, nil
}

// NewGetSamlLogoutRequest generates requests for GetSamlLogout
func NewGetSamlLogoutRequest(server string, params *GetSamlLogoutParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/saml/logout")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "X-Redirect-URL", runtime.ParamLocationHeader, params.XRedirectURL)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Redirect-URL", headerParam0)

		var headerParam1 string

		headerParam1, err = runtime.StyleParamWithLocation("simple", false, "X-Redirect-URL-On-Error", runtime.ParamLocationHeader, params.XRedirectURLOnError)
		if err != nil {
			return nil, err
		}

		req.Header.Set("X-Redirect-URL-On-Error", headerParam1)

	}

	return req, nil
}

// NewPostSamlSloRequestWithFormdataBody calls the generic PostSamlSlo builder with application/x-www-form-urlencoded body
func NewPostSamlSloRequestWithFormdataBody(server string, body PostSamlSloFormdataRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	bodyStr, err := runtime.MarshalForm(body, nil)
	if err != nil {
		return nil, err
	}
	bodyReader = strings.NewReader(bodyStr.Encode())
	return NewPostSamlSloRequestWithBody(server, "application/x-www-form-urlencoded", bodyReader)
}

// NewPostSamlSloRequestWithBody generates requests for PostSamlSlo with any type of body
func NewPostSamlSloRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/saml/slo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetWsUuidRequest generates requests for GetWsUuid
func NewGetWsUuidRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/ws/:uuid")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostFeaturePointsWithBodyWithResponse request with any body
	PostFeaturePointsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFeaturePointsResponse, error)

	// PostSamlAcsWithBodyWithResponse request with any body
	PostSamlAcsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSamlAcsResponse, error)

	PostSamlAcsWithFormdataBodyWithResponse(ctx context.Context, body PostSamlAcsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSamlAcsResponse, error)

	// GetSamlErrorWithResponse request
	GetSamlErrorWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSamlErrorResponse, error)

	// GetSamlLoginWithResponse request
	GetSamlLoginWithResponse(ctx context.Context, params *GetSamlLoginParams, reqEditors ...RequestEditorFn) (*GetSamlLoginResponse, error)

	// GetSamlLogoutWithResponse request
	GetSamlLogoutWithResponse(ctx context.Context, params *GetSamlLogoutParams, reqEditors ...RequestEditorFn) (*GetSamlLogoutResponse, error)

	// PostSamlSloWithBodyWithResponse request with any body
	PostSamlSloWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSamlSloResponse, error)

	PostSamlSloWithFormdataBodyWithResponse(ctx context.Context, body PostSamlSloFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSamlSloResponse, error)

	// GetWsUuidWithResponse request
	GetWsUuidWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWsUuidResponse, error)
}

type PostFeaturePointsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *CreateFeaturePointsResult
	JSON400      *Error
	JSON401      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r PostFeaturePointsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostFeaturePointsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSamlAcsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSamlAcsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSamlAcsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSamlErrorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ErrorWithTime
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetSamlErrorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSamlErrorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSamlLoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetSamlLoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSamlLoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSamlLogoutResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *Error
}

// Status returns HTTPResponse.Status
func (r GetSamlLogoutResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSamlLogoutResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSamlSloResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostSamlSloResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSamlSloResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetWsUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetWsUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetWsUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostFeaturePointsWithBodyWithResponse request with arbitrary body returning *PostFeaturePointsResponse
func (c *ClientWithResponses) PostFeaturePointsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostFeaturePointsResponse, error) {
	rsp, err := c.PostFeaturePointsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostFeaturePointsResponse(rsp)
}

// PostSamlAcsWithBodyWithResponse request with arbitrary body returning *PostSamlAcsResponse
func (c *ClientWithResponses) PostSamlAcsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSamlAcsResponse, error) {
	rsp, err := c.PostSamlAcsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSamlAcsResponse(rsp)
}

func (c *ClientWithResponses) PostSamlAcsWithFormdataBodyWithResponse(ctx context.Context, body PostSamlAcsFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSamlAcsResponse, error) {
	rsp, err := c.PostSamlAcsWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSamlAcsResponse(rsp)
}

// GetSamlErrorWithResponse request returning *GetSamlErrorResponse
func (c *ClientWithResponses) GetSamlErrorWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSamlErrorResponse, error) {
	rsp, err := c.GetSamlError(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSamlErrorResponse(rsp)
}

// GetSamlLoginWithResponse request returning *GetSamlLoginResponse
func (c *ClientWithResponses) GetSamlLoginWithResponse(ctx context.Context, params *GetSamlLoginParams, reqEditors ...RequestEditorFn) (*GetSamlLoginResponse, error) {
	rsp, err := c.GetSamlLogin(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSamlLoginResponse(rsp)
}

// GetSamlLogoutWithResponse request returning *GetSamlLogoutResponse
func (c *ClientWithResponses) GetSamlLogoutWithResponse(ctx context.Context, params *GetSamlLogoutParams, reqEditors ...RequestEditorFn) (*GetSamlLogoutResponse, error) {
	rsp, err := c.GetSamlLogout(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSamlLogoutResponse(rsp)
}

// PostSamlSloWithBodyWithResponse request with arbitrary body returning *PostSamlSloResponse
func (c *ClientWithResponses) PostSamlSloWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostSamlSloResponse, error) {
	rsp, err := c.PostSamlSloWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSamlSloResponse(rsp)
}

func (c *ClientWithResponses) PostSamlSloWithFormdataBodyWithResponse(ctx context.Context, body PostSamlSloFormdataRequestBody, reqEditors ...RequestEditorFn) (*PostSamlSloResponse, error) {
	rsp, err := c.PostSamlSloWithFormdataBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSamlSloResponse(rsp)
}

// GetWsUuidWithResponse request returning *GetWsUuidResponse
func (c *ClientWithResponses) GetWsUuidWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetWsUuidResponse, error) {
	rsp, err := c.GetWsUuid(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetWsUuidResponse(rsp)
}

// ParsePostFeaturePointsResponse parses an HTTP response from a PostFeaturePointsWithResponse call
func ParsePostFeaturePointsResponse(rsp *http.Response) (*PostFeaturePointsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostFeaturePointsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest CreateFeaturePointsResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostSamlAcsResponse parses an HTTP response from a PostSamlAcsWithResponse call
func ParsePostSamlAcsResponse(rsp *http.Response) (*PostSamlAcsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSamlAcsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetSamlErrorResponse parses an HTTP response from a GetSamlErrorWithResponse call
func ParseGetSamlErrorResponse(rsp *http.Response) (*GetSamlErrorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSamlErrorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ErrorWithTime
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetSamlLoginResponse parses an HTTP response from a GetSamlLoginWithResponse call
func ParseGetSamlLoginResponse(rsp *http.Response) (*GetSamlLoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSamlLoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetSamlLogoutResponse parses an HTTP response from a GetSamlLogoutWithResponse call
func ParseGetSamlLogoutResponse(rsp *http.Response) (*GetSamlLogoutResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSamlLogoutResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParsePostSamlSloResponse parses an HTTP response from a PostSamlSloWithResponse call
func ParsePostSamlSloResponse(rsp *http.Response) (*PostSamlSloResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSamlSloResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetWsUuidResponse parses an HTTP response from a GetWsUuidWithResponse call
func ParseGetWsUuidResponse(rsp *http.Response) (*GetWsUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetWsUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// ローソク足のデータが格納されたファイル(MT4が出力したCSVなど)をアップロードし、特徴点の抽出を開始します。
	// (POST /feature_points)
	PostFeaturePoints(ctx echo.Context) error
	// IdPから受け取る認証レスポンス（SAMLアサーション）を処理するエンドポイント。
	// (POST /saml/acs)
	PostSamlAcs(ctx echo.Context) error
	// SAMLログインのエラー詳細を返却するエンドポイント
	// (GET /saml/error)
	GetSamlError(ctx echo.Context) error
	// ユーザをシングルサインオンさせるログインリクエストを作成し、FormのPOSTによってidPに送信するスクリプトタグを含んだHTMLを返却するエンドポイント。
	// (GET /saml/login)
	GetSamlLogin(ctx echo.Context, params GetSamlLoginParams) error
	// ユーザをログアウトさせるログアウトリクエストを作成し、FormのPOSTによってidPに送信するスクリプトタグを含んだHTMLを返却するエンドポイント。
	// (GET /saml/logout)
	GetSamlLogout(ctx echo.Context, params GetSamlLogoutParams) error
	// IdPから受け取るログアウトリクエストを処理し、ユーザーをログアウトさせるエンドポイント。
	// (POST /saml/slo)
	PostSamlSlo(ctx echo.Context) error
	// Websocketと接続します。
	// (GET /ws/:uuid)
	GetWsUuid(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostFeaturePoints converts echo context to params.
func (w *ServerInterfaceWrapper) PostFeaturePoints(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostFeaturePoints(ctx)
	return err
}

// PostSamlAcs converts echo context to params.
func (w *ServerInterfaceWrapper) PostSamlAcs(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSamlAcs(ctx)
	return err
}

// GetSamlError converts echo context to params.
func (w *ServerInterfaceWrapper) GetSamlError(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSamlError(ctx)
	return err
}

// GetSamlLogin converts echo context to params.
func (w *ServerInterfaceWrapper) GetSamlLogin(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSamlLoginParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Redirect-URL" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Redirect-URL")]; found {
		var XRedirectURL string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Redirect-URL, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Redirect-URL", runtime.ParamLocationHeader, valueList[0], &XRedirectURL)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Redirect-URL: %s", err))
		}

		params.XRedirectURL = XRedirectURL
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Redirect-URL is required, but not found"))
	}
	// ------------- Required header parameter "X-Redirect-URL-On-Error" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Redirect-URL-On-Error")]; found {
		var XRedirectURLOnError string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Redirect-URL-On-Error, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Redirect-URL-On-Error", runtime.ParamLocationHeader, valueList[0], &XRedirectURLOnError)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Redirect-URL-On-Error: %s", err))
		}

		params.XRedirectURLOnError = XRedirectURLOnError
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Redirect-URL-On-Error is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSamlLogin(ctx, params)
	return err
}

// GetSamlLogout converts echo context to params.
func (w *ServerInterfaceWrapper) GetSamlLogout(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetSamlLogoutParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "X-Redirect-URL" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Redirect-URL")]; found {
		var XRedirectURL string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Redirect-URL, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Redirect-URL", runtime.ParamLocationHeader, valueList[0], &XRedirectURL)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Redirect-URL: %s", err))
		}

		params.XRedirectURL = XRedirectURL
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Redirect-URL is required, but not found"))
	}
	// ------------- Required header parameter "X-Redirect-URL-On-Error" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("X-Redirect-URL-On-Error")]; found {
		var XRedirectURLOnError string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for X-Redirect-URL-On-Error, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "X-Redirect-URL-On-Error", runtime.ParamLocationHeader, valueList[0], &XRedirectURLOnError)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter X-Redirect-URL-On-Error: %s", err))
		}

		params.XRedirectURLOnError = XRedirectURLOnError
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter X-Redirect-URL-On-Error is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetSamlLogout(ctx, params)
	return err
}

// PostSamlSlo converts echo context to params.
func (w *ServerInterfaceWrapper) PostSamlSlo(ctx echo.Context) error {
	var err error

	ctx.Set(CookieAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostSamlSlo(ctx)
	return err
}

// GetWsUuid converts echo context to params.
func (w *ServerInterfaceWrapper) GetWsUuid(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetWsUuid(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/feature_points", wrapper.PostFeaturePoints)
	router.POST(baseURL+"/saml/acs", wrapper.PostSamlAcs)
	router.GET(baseURL+"/saml/error", wrapper.GetSamlError)
	router.GET(baseURL+"/saml/login", wrapper.GetSamlLogin)
	router.GET(baseURL+"/saml/logout", wrapper.GetSamlLogout)
	router.POST(baseURL+"/saml/slo", wrapper.PostSamlSlo)
	router.GET(baseURL+"/ws/:uuid", wrapper.GetWsUuid)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
