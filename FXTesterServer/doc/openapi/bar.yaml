openapi: "3.0.0"
info:
  version: 1.0.0
  title: BarService
  license:
    name: MIT
servers:
  - url: https://localhost:8000/
components:
  securitySchemes:
    cookieAuth:         # arbitrary name for the security scheme; will be used in the "security" key later
      type: apiKey
      in: cookie
      name: access_token
  schemas:
    SAMLForm:
      type: string
      example: |
        example: |
          <!DOCTYPE html>
          <html>
            <body>
              <form method="POST" id="SAMLRequestForm">
                <input name="SAMLRequest" ・・・>
              </form>
              <script>document.getElementById("SAMLRequestForm").submit()</script>
            </body>
          </html>
    SAMLRequest:
      type: object
      properties:
        SAMLReqeust:
          type: string
          example: "PHNhbWxwOlJlc3BvbnNlIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6d・・・"
        RelayState:
          type: string
          example: "xxx"
    SAMLResponse:
      type: object
      properties:
        SAMLResponse:
          type: string
          example: "PHNhbWxwOlJlc3BvbnNlIHhtbG5zOnNhbWxwPSJ1cm46b2FzaXM6bmFtZXM6d・・・"
        RelayState:
          type: string
          example: "xxx"
    Error:
      type: object
      properties:
        code:
          type: integer
          format: uint32
          description: サーバー内部で使用しているエラーコード
          example: "0x800001"
        message:
          type: string
          description: エラーメッセージ (多言語化対象)
          example: |
            インターナルエラーが発生しました。
            (エラーコード: 0x800001)
      required:
        - code
        - message
    ErrorWithTime:
      type: object
      properties:
        err:
          $ref: "#/components/schemas/Error"
        time:
          type: string
          example: "2024-08-14T11:19:12+09:00"
      required:
        - err
        - time
    File:
      type: string
      format: binary
      description: ファイルのテキストまたはバイナリデータ
    CsvInfo:
      type: object
      properties:
        existsHeader:
          type: boolean
          description: csvにヘッダ行が存在するか
          example: false
        delimiterChar:
          type: string
          description: csvファイルの区切り文字
          example: ","
          minLength: 1
          maxLength: 1
          format: '^[,\t\s]$'
        timeColumnIndex:
          type: integer
          description: 時間カラムのインデックス番号(0始まり)
          example: 0
          minimum: 0
        openColumnIndex:
          type: integer
          description: 始値カラムのインデックス番号(0始まり)
          example: 1
          minimum: 0
        highColumnIndex:
          type: integer
          description: 高値カラムのインデックス番号(0始まり)
          example: 2
          minimum: 0
        lowColumnIndex:
          type: integer
          description: 安値カラムのインデックス番号(0始まり)
          example: 3
          minimum: 0
        closeColumnIndex:
          type: integer
          description: 終値カラムのインデックス番号(0始まり)
          example: 4
          minimum: 0
      required:
        - existsHeader
        - delimiterChar
        - timeColumnIndex
        - openColumnIndex
        - highColumnIndex
        - lowColumnIndex
        - closeColumnIndex
    Candle:
      type: object
      description: ローソク足
      properties:
        time:
          type: string
          example: '2014-10-10T13:50:40.567+09:00'
          description: 日時
          format: '^\d{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])T(?:[0-1][0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9](?:\.[0-9]+)?(?:Z|[+-](?:[0-1][0-9]|2[0-3]):[0-5][0-9])$'
        open:
          type: number
          format: float
          example: 150.101
          description: 始値
          minimum: 0.0
        high:
          type: number
          format: float
          example: 151.533
          description: 高値
          minimum: 0.0
        low:
          type: number
          format: float
          example: 149.224
          description: 安値
          minimum: 0.0
        close:
          type: number
          format: float
          example: 150.524
          description: 終値
          minimum: 0.0
      required:
        - time
        - open
        - high
        - low
        - close
    Candles:
      type: array
      description: ローソク足配列
      items:
        $ref: "#/components/schemas/Candle"
    Zigzag:
      type: object
      properties:
        startTime:
          type: string
          example: "2024-08-14T11:19:12Z"
        peakIndex:
          type: integer
          minimum: 0
        bottomIndex:
          type: integer
          minimum: 0
        velocity:
          type: number
          format: float
        delta:
          type: number
          format: float
        kind:
          enum: [peakToBottom, bottomToPeak]
    PostZigzagRequest:
      type: object
      properties:
        type:
          type: string
          enum: [csv, candles]
          description: 入力データのタイプ
          example: csv
        csvInfo:
          $ref: "#/components/schemas/CsvInfo"
        csv:
          $ref: "#/components/schemas/File"
        candles:
          $ref: "#/components/schemas/Candles"
      required:
        - type
    PostZigzagResult:
      type: object
      properties:
        items:
          $ref: "#/components/schemas/Zigzag"
        count:
          type: integer
          minimum: 0
      required:
        - count
        - items
    Progress:
      type: object
      properties:
        progress:
          type: number
          format: float
          description: 進捗率[0.0~1.0]
        complete:
          type: boolean
          description: 作業完了フラグ
paths:
  /saml/login:
    get:
      tags:
        - 認証API
      summary: ユーザをシングルサインオンさせるログインリクエストを作成し、FormのPOSTによってidPに送信するスクリプトタグを含んだHTMLを返却するエンドポイント。
      security: []
      parameters:
        - name: X-Redirect-URL
          in: header
          required: true
          description: シングルサインオン完了時にリダイレクトさせたいURLを指定する
          schema:
            type: string
            example: "https://xxxxx/"
        - name: X-Redirect-URL-On-Error
          in: header
          required: true
          description: シングルサインオンエラー時にリダイレクトさせたいURLを指定する
          schema:
            type: string
            example: "https://xxxxx/"
      responses:
        '200':
          description: 正常終了
          headers:
            Set-Cookie:
              schema:
                type: string
                example: sso_token=xxxx; Path=/saml/acs; HttpOnly
          content:
            text/html:
              schema:
                $ref: "#/components/schemas/SAMLForm"
        default:
          description: シングルサインオンが許可されなかった場合
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /saml/acs:
    post:
      tags:
        - 認証API
      summary: IdPから受け取る認証レスポンス（SAMLアサーション）を処理するエンドポイント。
      security: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: "#/components/schemas/SAMLResponse"
      responses:
        '302':
          description: |
             正常終了<br>
             (エラーが発生した場合はHttpヘッダのLocationに格納されれているURLにURLパラメータ(saml_error=1)が付与される)
          headers:
            Set-Cookie:
              schema:
                type: string
                example: access_token=xxxx; Path=/; HttpOnly, refresh_token=xxxx; Path=/TODO; HttpOnly, saml_error_token=xxxx; Path=/saml/error; HttpOnly
            Location:
              schema:
                type: string
                example: "https://xxxxx/login?saml_error=1"
              description: リダイレクト先のURL
  /saml/logout:
    get:
      tags:
        - 認証API
      summary: ユーザをログアウトさせるログアウトリクエストを作成し、FormのPOSTによってidPに送信するスクリプトタグを含んだHTMLを返却するエンドポイント。
      security: []
      parameters:
        - name: X-Redirect-URL
          in: header
          required: true
          description: シングルログアウト完了時にリダイレクトさせたいURLを指定する
          schema:
            type: string
            example: "https://xxxxx/"
        - name: X-Redirect-URL-On-Error
          in: header
          required: true
          description: シングルログアウトのエラー時にリダイレクトさせたいURLを指定する
          schema:
            type: string
            example: "https://xxxxx/"
      responses:
        '200':
          description: 正常終了
          headers:
            Set-Cookie:
              schema:
                type: string
                example: slo_token=xxxx; Path=/saml/slo; HttpOnly
          content:
            text/html:
              schema:
                $ref: "#/components/schemas/SAMLForm"
        default:
          description: シングルサインオンが許可されなかった場合
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /saml/slo:
    post:
      tags:
        - 認証API
      summary: IdPから受け取るログアウトリクエストを処理し、ユーザーをログアウトさせるエンドポイント。
      security: []
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              oneOf:
                - $ref: "#/components/schemas/SAMLRequest"
                - $ref: "#/components/schemas/SAMLResponse"
      responses:
        '200':
          description: |
            他SP起点のシングルログアウトが正常終了<br>
          content:
            text/html:
              schema:
                $ref: "#/components/schemas/SAMLForm"
        '302':
          description: |
             本SP起点のシングルログアウトが正常終了<br>
             (エラーが発生した場合はHttpヘッダのLocationに格納されれているURLにURLパラメータ(saml_error=1)が付与される)
          headers:
            Set-Cookie:
              schema:
                type: string
                example: saml_error_token=xxxx; Path=/saml/error; HttpOnly
            Location:
              schema:
                type: string
                example: "https://xxxxx/login?saml_error=1"
              description: リダイレクト先のURL
  /saml/error:
    get:
      tags:
        - 認証API
      summary: SAMLログインのエラー詳細を返却するエンドポイント
      security: []
      responses:
        '200':
          description: 正常終了
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorWithTime"
        default:
          description: 予期しないエラーが発生した場合
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /ws/:uuid:
    get:
      tags:
        - Websocket
      summary: Websocketと接続を行うためのエンドポイント。
      responses:
        '101':
          description: Websocketのハンドシェイクが正常に完了した場合
          # WebsocketのI/F仕様
          x-websocket-I/F:
            # FE→BE方向のデータフォーマット
            send:
              content:
                application/json:
                  schema:
                    type: object
                    description: 送信は全て無視される
                    properties:
                      action:
                        type: string
                        description: アクション名
                      payload:
                        type: string
                        description: ペイロード
            # BE→FE方向のデータフォーマット
            recv:
              content:
                application/json:
                  schema:
                    type: object
                    properties:
                      action:
                        type: string
                        enum: [progress]
                        description: アクション名
                      payload:
                        oneOf:
                          - $ref: "#/components/schemas/Progress"
        '204':
          description: UUIDに関連する作業がすでに完了している場合
        '400':
          description: |
            APIパラメータに不備があった場合
            - 不正なUUIDが指定された場合 等
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: 権限エラー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: |
            処理続行に困難な問題が発生した場合
            - サーバー負荷増大により処理を受け取れない
            - バックエンドのシステムに致命的な確認された 等
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /zigzag:
    post:
      tags:
        - ジグザグAPI
      summary: ローソク足をジグザグに変換し返却する
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PostZigzagRequest"
      responses:
        '201':
          description: ジグザグへの変換が正常に完了した場合
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PostZigzagResult"
        '400':
          description: |
            APIパラメータに不備があった場合
            - 予期しないパラメータの指定
            - ファイルデータの不備 等
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '401':
          description: 権限エラー
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '500':
          description: |
            処理続行に困難な問題が発生した場合
            - サーバー負荷増大により処理を受け取れない
            - バックエンドのシステムに致命的な確認された 等
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"